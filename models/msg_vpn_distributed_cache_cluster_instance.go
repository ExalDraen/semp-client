// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// MsgVpnDistributedCacheClusterInstance msg vpn distributed cache cluster instance
// swagger:model MsgVpnDistributedCacheClusterInstance
type MsgVpnDistributedCacheClusterInstance struct {

	// Enable or disable auto-start for the Cache Instance. When enabled, the Cache Instance will automatically attempt to transition from the Stopped operational state to Up whenever it restarts or reconnects to the message broker. The default value is `false`.
	AutoStartEnabled bool `json:"autoStartEnabled,omitempty"`

	// The name of the Distributed Cache.
	CacheName string `json:"cacheName,omitempty"`

	// The name of the Cache Cluster.
	ClusterName string `json:"clusterName,omitempty"`

	// Enable or disable the Cache Instance. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// The name of the Cache Instance.
	InstanceName string `json:"instanceName,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// Enable or disable stop-on-lost-message for the Cache Instance. When enabled, the Cache Instance will transition to the stopped operational state upon losing a message. When stopped, it cannot accept or respond to cache requests, but continues to cache messages. The default value is `true`.
	StopOnLostMsgEnabled bool `json:"stopOnLostMsgEnabled,omitempty"`
}

// Validate validates this msg vpn distributed cache cluster instance
func (m *MsgVpnDistributedCacheClusterInstance) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnDistributedCacheClusterInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnDistributedCacheClusterInstance) UnmarshalBinary(b []byte) error {
	var res MsgVpnDistributedCacheClusterInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
