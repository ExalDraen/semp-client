// Code generated by go-swagger; DO NOT EDIT.

package msg_vpn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ExalDraen/semp-client/models"
)

// GetMsgVpnSequencedTopicReader is a Reader for the GetMsgVpnSequencedTopic structure.
type GetMsgVpnSequencedTopicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMsgVpnSequencedTopicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMsgVpnSequencedTopicOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetMsgVpnSequencedTopicDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMsgVpnSequencedTopicOK creates a GetMsgVpnSequencedTopicOK with default headers values
func NewGetMsgVpnSequencedTopicOK() *GetMsgVpnSequencedTopicOK {
	return &GetMsgVpnSequencedTopicOK{}
}

/*GetMsgVpnSequencedTopicOK handles this case with default header values.

The Sequenced Topic object's attributes, and the request metadata.
*/
type GetMsgVpnSequencedTopicOK struct {
	Payload *models.MsgVpnSequencedTopicResponse
}

func (o *GetMsgVpnSequencedTopicOK) Error() string {
	return fmt.Sprintf("[GET /msgVpns/{msgVpnName}/sequencedTopics/{sequencedTopic}][%d] getMsgVpnSequencedTopicOK  %+v", 200, o.Payload)
}

func (o *GetMsgVpnSequencedTopicOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MsgVpnSequencedTopicResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMsgVpnSequencedTopicDefault creates a GetMsgVpnSequencedTopicDefault with default headers values
func NewGetMsgVpnSequencedTopicDefault(code int) *GetMsgVpnSequencedTopicDefault {
	return &GetMsgVpnSequencedTopicDefault{
		_statusCode: code,
	}
}

/*GetMsgVpnSequencedTopicDefault handles this case with default header values.

The error response.
*/
type GetMsgVpnSequencedTopicDefault struct {
	_statusCode int

	Payload *models.SempMetaOnlyResponse
}

// Code gets the status code for the get msg vpn sequenced topic default response
func (o *GetMsgVpnSequencedTopicDefault) Code() int {
	return o._statusCode
}

func (o *GetMsgVpnSequencedTopicDefault) Error() string {
	return fmt.Sprintf("[GET /msgVpns/{msgVpnName}/sequencedTopics/{sequencedTopic}][%d] getMsgVpnSequencedTopic default  %+v", o._statusCode, o.Payload)
}

func (o *GetMsgVpnSequencedTopicDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SempMetaOnlyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
