// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MsgVpnDistributedCacheCluster msg vpn distributed cache cluster
// swagger:model MsgVpnDistributedCacheCluster
type MsgVpnDistributedCacheCluster struct {

	// The name of the Distributed Cache.
	CacheName string `json:"cacheName,omitempty"`

	// The name of the Cache Cluster.
	ClusterName string `json:"clusterName,omitempty"`

	// Enable or disable deliver-to-one override for the Cache Cluster. The default value is `true`.
	DeliverToOneOverrideEnabled bool `json:"deliverToOneOverrideEnabled,omitempty"`

	// Enable or disable the Cache Cluster. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// event data byte rate threshold
	EventDataByteRateThreshold *EventThresholdByValue `json:"eventDataByteRateThreshold,omitempty"`

	// event data msg rate threshold
	EventDataMsgRateThreshold *EventThresholdByValue `json:"eventDataMsgRateThreshold,omitempty"`

	// event max memory threshold
	EventMaxMemoryThreshold *EventThresholdByPercent `json:"eventMaxMemoryThreshold,omitempty"`

	// event max topics threshold
	EventMaxTopicsThreshold *EventThresholdByPercent `json:"eventMaxTopicsThreshold,omitempty"`

	// event request queue depth threshold
	EventRequestQueueDepthThreshold *EventThresholdByPercent `json:"eventRequestQueueDepthThreshold,omitempty"`

	// event request rate threshold
	EventRequestRateThreshold *EventThresholdByValue `json:"eventRequestRateThreshold,omitempty"`

	// event response rate threshold
	EventResponseRateThreshold *EventThresholdByValue `json:"eventResponseRateThreshold,omitempty"`

	// Enable or disable global caching for the Cache Cluster. When enabled, the Cache Instances will fetch topics from remote Home Cache Clusters when requested, and subscribe to those topics to cache them locally. When disabled, the Cache Instances will remove all subscriptions and cached messages for topics from remote Home Cache Clusters. The default value is `false`.
	GlobalCachingEnabled bool `json:"globalCachingEnabled,omitempty"`

	// The heartbeat interval, in seconds, used by the Cache Instances to monitor connectivity with the remote Home Cache Clusters. The default value is `3`.
	GlobalCachingHeartbeat int64 `json:"globalCachingHeartbeat,omitempty"`

	// The topic lifetime, in seconds. If no client requests are received for a given global topic over the duration of the topic lifetime, then the Cache Instance will remove the subscription and cached messages for that topic. A value of 0 disables aging. The default value is `3600`.
	GlobalCachingTopicLifetime int64 `json:"globalCachingTopicLifetime,omitempty"`

	// The maximum memory usage, in megabytes (MB), for each Cache Instance in the Cache Cluster. The default value is `2048`.
	MaxMemory int64 `json:"maxMemory,omitempty"`

	// The maximum number of messages per topic for each Cache Instance in the Cache Cluster. When at the maximum, old messages are removed as new messages arrive. The default value is `1`.
	MaxMsgsPerTopic int64 `json:"maxMsgsPerTopic,omitempty"`

	// The maximum queue depth for cache requests received by the Cache Cluster. The default value is `100000`.
	MaxRequestQueueDepth int64 `json:"maxRequestQueueDepth,omitempty"`

	// The maximum number of topics for each Cache Instance in the Cache Cluster. The default value is `2000000`.
	MaxTopicCount int64 `json:"maxTopicCount,omitempty"`

	// The message lifetime, in seconds. If a message remains cached for the duration of its lifetime, the Cache Instance will remove the message. A lifetime of 0 results in the message being retained indefinitely. The default is to have no `msgLifetime`.
	MsgLifetime int64 `json:"msgLifetime,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// Enable or disable the advertising, onto the message bus, of new topics learned by each Cache Instance in the Cache Cluster. The default value is `false`.
	NewTopicAdvertisementEnabled bool `json:"newTopicAdvertisementEnabled,omitempty"`
}

// Validate validates this msg vpn distributed cache cluster
func (m *MsgVpnDistributedCacheCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventDataByteRateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDataMsgRateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventMaxMemoryThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventMaxTopicsThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventRequestQueueDepthThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventRequestRateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventResponseRateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MsgVpnDistributedCacheCluster) validateEventDataByteRateThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventDataByteRateThreshold) { // not required
		return nil
	}

	if m.EventDataByteRateThreshold != nil {
		if err := m.EventDataByteRateThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventDataByteRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnDistributedCacheCluster) validateEventDataMsgRateThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventDataMsgRateThreshold) { // not required
		return nil
	}

	if m.EventDataMsgRateThreshold != nil {
		if err := m.EventDataMsgRateThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventDataMsgRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnDistributedCacheCluster) validateEventMaxMemoryThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventMaxMemoryThreshold) { // not required
		return nil
	}

	if m.EventMaxMemoryThreshold != nil {
		if err := m.EventMaxMemoryThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventMaxMemoryThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnDistributedCacheCluster) validateEventMaxTopicsThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventMaxTopicsThreshold) { // not required
		return nil
	}

	if m.EventMaxTopicsThreshold != nil {
		if err := m.EventMaxTopicsThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventMaxTopicsThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnDistributedCacheCluster) validateEventRequestQueueDepthThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventRequestQueueDepthThreshold) { // not required
		return nil
	}

	if m.EventRequestQueueDepthThreshold != nil {
		if err := m.EventRequestQueueDepthThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventRequestQueueDepthThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnDistributedCacheCluster) validateEventRequestRateThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventRequestRateThreshold) { // not required
		return nil
	}

	if m.EventRequestRateThreshold != nil {
		if err := m.EventRequestRateThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventRequestRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnDistributedCacheCluster) validateEventResponseRateThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventResponseRateThreshold) { // not required
		return nil
	}

	if m.EventResponseRateThreshold != nil {
		if err := m.EventResponseRateThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventResponseRateThreshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnDistributedCacheCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnDistributedCacheCluster) UnmarshalBinary(b []byte) error {
	var res MsgVpnDistributedCacheCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
