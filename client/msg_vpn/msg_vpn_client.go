// Code generated by go-swagger; DO NOT EDIT.

package msg_vpn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new msg vpn API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for msg vpn API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateMsgVpn creates a message v p n object

Create a Message VPN object. Any attribute missing from the request will be set to its default value.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
replicationBridgeAuthenticationBasicPassword||||x|
replicationBridgeAuthenticationClientCertContent||||x|
replicationBridgeAuthenticationClientCertPassword||||x|
replicationEnabledQueueBehavior||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpn(params *CreateMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpn",
		Method:             "POST",
		PathPattern:        "/msgVpns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnOK), nil

}

/*
CreateMsgVpnSequencedTopic creates a sequenced topic object

Create a Sequenced Topic object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
sequencedTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnSequencedTopic(params *CreateMsgVpnSequencedTopicParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnSequencedTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnSequencedTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnSequencedTopic",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/sequencedTopics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnSequencedTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnSequencedTopicOK), nil

}

/*
DeleteMsgVpn deletes a message v p n object

Delete a Message VPN object.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpn(params *DeleteMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpn",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnOK), nil

}

/*
DeleteMsgVpnSequencedTopic deletes a sequenced topic object

Delete a Sequenced Topic object.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnSequencedTopic(params *DeleteMsgVpnSequencedTopicParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnSequencedTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnSequencedTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnSequencedTopic",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/sequencedTopics/{sequencedTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnSequencedTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnSequencedTopicOK), nil

}

/*
GetMsgVpn gets a message v p n object

Get a Message VPN object.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
replicationBridgeAuthenticationBasicPassword||x|
replicationBridgeAuthenticationClientCertContent||x|
replicationBridgeAuthenticationClientCertPassword||x|
replicationEnabledQueueBehavior||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpn(params *GetMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpn",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnOK), nil

}

/*
GetMsgVpnSequencedTopic gets a sequenced topic object

Get a Sequenced Topic object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
sequencedTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnSequencedTopic(params *GetMsgVpnSequencedTopicParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnSequencedTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnSequencedTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnSequencedTopic",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/sequencedTopics/{sequencedTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnSequencedTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnSequencedTopicOK), nil

}

/*
GetMsgVpnSequencedTopics gets a list of sequenced topic objects

Get a list of Sequenced Topic objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
sequencedTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnSequencedTopics(params *GetMsgVpnSequencedTopicsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnSequencedTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnSequencedTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnSequencedTopics",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/sequencedTopics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnSequencedTopicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnSequencedTopicsOK), nil

}

/*
GetMsgVpns gets a list of message v p n objects

Get a list of Message VPN objects.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
replicationBridgeAuthenticationBasicPassword||x|
replicationBridgeAuthenticationClientCertContent||x|
replicationBridgeAuthenticationClientCertPassword||x|
replicationEnabledQueueBehavior||x|



A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpns(params *GetMsgVpnsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpns",
		Method:             "GET",
		PathPattern:        "/msgVpns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnsOK), nil

}

/*
ReplaceMsgVpn replaces a message v p n object

Replace a Message VPN object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
replicationBridgeAuthenticationBasicPassword|||x||
replicationBridgeAuthenticationClientCertContent|||x||
replicationBridgeAuthenticationClientCertPassword|||x||
replicationEnabledQueueBehavior|||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation. Requests which include the following attributes require greater access scope/level:


Attribute|Access Scope/Level
:---|:---:
authenticationBasicEnabled|global/read-write
authenticationBasicProfileName|global/read-write
authenticationBasicRadiusDomain|global/read-write
authenticationBasicType|global/read-write
authenticationClientCertAllowApiProvidedUsernameEnabled|global/read-write
authenticationClientCertEnabled|global/read-write
authenticationClientCertMaxChainDepth|global/read-write
authenticationClientCertRevocationCheckMode|global/read-write
authenticationClientCertUsernameSource|global/read-write
authenticationClientCertValidateDateEnabled|global/read-write
authenticationKerberosAllowApiProvidedUsernameEnabled|global/read-write
authenticationKerberosEnabled|global/read-write
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
bridgingTlsServerCertMaxChainDepth|global/read-write
bridgingTlsServerCertValidateDateEnabled|global/read-write
dmrEnabled|global/read-write
exportSubscriptionsEnabled|global/read-write
maxConnectionCount|global/read-write
maxEgressFlowCount|global/read-write
maxEndpointCount|global/read-write
maxIngressFlowCount|global/read-write
maxMsgSpoolUsage|global/read-write
maxSubscriptionCount|global/read-write
maxTransactedSessionCount|global/read-write
maxTransactionCount|global/read-write
mqttRetainMaxMemory|global/read-write
replicationBridgeAuthenticationBasicClientUsername|global/read-write
replicationBridgeAuthenticationBasicPassword|global/read-write
replicationBridgeAuthenticationClientCertContent|global/read-write
replicationBridgeAuthenticationClientCertPassword|global/read-write
replicationBridgeAuthenticationScheme|global/read-write
replicationBridgeCompressedDataEnabled|global/read-write
replicationBridgeEgressFlowWindowSize|global/read-write
replicationBridgeRetryDelay|global/read-write
replicationBridgeTlsEnabled|global/read-write
replicationBridgeUnidirectionalClientProfileName|global/read-write
replicationEnabled|global/read-write
replicationEnabledQueueBehavior|global/read-write
replicationQueueMaxMsgSpoolUsage|global/read-write
replicationRole|global/read-write
restTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
restTlsServerCertMaxChainDepth|global/read-write
restTlsServerCertValidateDateEnabled|global/read-write
sempOverMsgBusAdminClientEnabled|global/read-write
sempOverMsgBusAdminDistributedCacheEnabled|global/read-write
sempOverMsgBusAdminEnabled|global/read-write
sempOverMsgBusEnabled|global/read-write
sempOverMsgBusShowEnabled|global/read-write
serviceAmqpMaxConnectionCount|global/read-write
serviceMqttMaxConnectionCount|global/read-write
serviceRestIncomingMaxConnectionCount|global/read-write
serviceRestIncomingPlainTextListenPort|global/read-write
serviceRestIncomingTlsListenPort|global/read-write
serviceRestOutgoingMaxConnectionCount|global/read-write
serviceSmfMaxConnectionCount|global/read-write
serviceWebMaxConnectionCount|global/read-write



This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpn(params *ReplaceMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpn",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnOK), nil

}

/*
UpdateMsgVpn updates a message v p n object

Update a Message VPN object. Any attribute missing from the request will be left unchanged.

Message VPNs (Virtual Private Networks) allow for the segregation of topic space and clients. They also group clients connecting to a network of message brokers, such that messages published within a particular group are only visible to that group's clients.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
replicationBridgeAuthenticationBasicPassword|||x||
replicationBridgeAuthenticationClientCertContent|||x||
replicationBridgeAuthenticationClientCertPassword|||x||
replicationEnabledQueueBehavior|||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByValue|clearValue|setValue|
EventThresholdByValue|setValue|clearValue|
MsgVpn|authenticationBasicProfileName|authenticationBasicType|
MsgVpn|authorizationProfileName|authorizationType|
MsgVpn|eventPublishTopicFormatMqttEnabled|eventPublishTopicFormatSmfEnabled|
MsgVpn|eventPublishTopicFormatSmfEnabled|eventPublishTopicFormatMqttEnabled|
MsgVpn|replicationBridgeAuthenticationBasicClientUsername|replicationBridgeAuthenticationBasicPassword|
MsgVpn|replicationBridgeAuthenticationBasicPassword|replicationBridgeAuthenticationBasicClientUsername|
MsgVpn|replicationBridgeAuthenticationClientCertPassword|replicationBridgeAuthenticationClientCertContent|
MsgVpn|replicationEnabledQueueBehavior|replicationEnabled|



A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation. Requests which include the following attributes require greater access scope/level:


Attribute|Access Scope/Level
:---|:---:
authenticationBasicEnabled|global/read-write
authenticationBasicProfileName|global/read-write
authenticationBasicRadiusDomain|global/read-write
authenticationBasicType|global/read-write
authenticationClientCertAllowApiProvidedUsernameEnabled|global/read-write
authenticationClientCertEnabled|global/read-write
authenticationClientCertMaxChainDepth|global/read-write
authenticationClientCertRevocationCheckMode|global/read-write
authenticationClientCertUsernameSource|global/read-write
authenticationClientCertValidateDateEnabled|global/read-write
authenticationKerberosAllowApiProvidedUsernameEnabled|global/read-write
authenticationKerberosEnabled|global/read-write
bridgingTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
bridgingTlsServerCertMaxChainDepth|global/read-write
bridgingTlsServerCertValidateDateEnabled|global/read-write
dmrEnabled|global/read-write
exportSubscriptionsEnabled|global/read-write
maxConnectionCount|global/read-write
maxEgressFlowCount|global/read-write
maxEndpointCount|global/read-write
maxIngressFlowCount|global/read-write
maxMsgSpoolUsage|global/read-write
maxSubscriptionCount|global/read-write
maxTransactedSessionCount|global/read-write
maxTransactionCount|global/read-write
mqttRetainMaxMemory|global/read-write
replicationBridgeAuthenticationBasicClientUsername|global/read-write
replicationBridgeAuthenticationBasicPassword|global/read-write
replicationBridgeAuthenticationClientCertContent|global/read-write
replicationBridgeAuthenticationClientCertPassword|global/read-write
replicationBridgeAuthenticationScheme|global/read-write
replicationBridgeCompressedDataEnabled|global/read-write
replicationBridgeEgressFlowWindowSize|global/read-write
replicationBridgeRetryDelay|global/read-write
replicationBridgeTlsEnabled|global/read-write
replicationBridgeUnidirectionalClientProfileName|global/read-write
replicationEnabled|global/read-write
replicationEnabledQueueBehavior|global/read-write
replicationQueueMaxMsgSpoolUsage|global/read-write
replicationRole|global/read-write
restTlsServerCertEnforceTrustedCommonNameEnabled|global/read-write
restTlsServerCertMaxChainDepth|global/read-write
restTlsServerCertValidateDateEnabled|global/read-write
sempOverMsgBusAdminClientEnabled|global/read-write
sempOverMsgBusAdminDistributedCacheEnabled|global/read-write
sempOverMsgBusAdminEnabled|global/read-write
sempOverMsgBusEnabled|global/read-write
sempOverMsgBusShowEnabled|global/read-write
serviceAmqpMaxConnectionCount|global/read-write
serviceMqttMaxConnectionCount|global/read-write
serviceRestIncomingMaxConnectionCount|global/read-write
serviceRestIncomingPlainTextListenPort|global/read-write
serviceRestIncomingTlsListenPort|global/read-write
serviceRestOutgoingMaxConnectionCount|global/read-write
serviceSmfMaxConnectionCount|global/read-write
serviceWebMaxConnectionCount|global/read-write



This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpn(params *UpdateMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpn",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
