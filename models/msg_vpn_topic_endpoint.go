// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnTopicEndpoint msg vpn topic endpoint
// swagger:model MsgVpnTopicEndpoint
type MsgVpnTopicEndpoint struct {

	// The Topic Endpoint access type of either "exclusive" or "non-exclusive". The default value is `"exclusive"`. The allowed values and their meaning are:
	//
	// <pre>
	// "exclusive" - Exclusive delivery of messages to first bound client.
	// "non-exclusive" - Non-exclusive delivery of messages to all bound clients.
	// </pre>
	//  Available since 2.4.
	// Enum: [exclusive non-exclusive]
	AccessType string `json:"accessType,omitempty"`

	// Enable or disable the propagation of Consumer ACKs received on the active replication Message VPN to the standby replication Message VPN. The default value is `true`.
	ConsumerAckPropagationEnabled bool `json:"consumerAckPropagationEnabled,omitempty"`

	// The name of the Dead Message Queue (DMQ) used by the Topic Endpoint. The default value is `"#DEAD_MSG_QUEUE"`.
	DeadMsgQueue string `json:"deadMsgQueue,omitempty"`

	// Enable or disable the egress flow of messages from the Topic Endpoint. The default value is `false`.
	EgressEnabled bool `json:"egressEnabled,omitempty"`

	// event bind count threshold
	EventBindCountThreshold *EventThreshold `json:"eventBindCountThreshold,omitempty"`

	// event reject low priority msg limit threshold
	EventRejectLowPriorityMsgLimitThreshold *EventThreshold `json:"eventRejectLowPriorityMsgLimitThreshold,omitempty"`

	// event spool usage threshold
	EventSpoolUsageThreshold *EventThreshold `json:"eventSpoolUsageThreshold,omitempty"`

	// Enable or disable the ingress flow of messages to the Topic Endpoint. The default value is `false`.
	IngressEnabled bool `json:"ingressEnabled,omitempty"`

	// The maximum number of simultaneous Consumers of the Topic Endpoint. The default value is `1`. Available since 2.4.
	MaxBindCount int64 `json:"maxBindCount,omitempty"`

	// The maximum allowed number of messages delivered but not acknowledged per flow for the Topic Endpoint. The default is the maximum value supported by the hardware. The default value is `10000`.
	MaxDeliveredUnackedMsgsPerFlow int64 `json:"maxDeliveredUnackedMsgsPerFlow,omitempty"`

	// The maximum message size allowed in the Topic Endpoint, in bytes. The default value is `10000000`.
	MaxMsgSize int32 `json:"maxMsgSize,omitempty"`

	// The maximum number of times the Topic Endpoint will attempt redelivery of a given message prior to it being discarded or moved to the #DEAD_MSG_QUEUE. A value of 0 means to retry forever. The default value is `0`.
	MaxRedeliveryCount int64 `json:"maxRedeliveryCount,omitempty"`

	// The maximum Message Spool usage by the Topic Endpoint (quota), in megabytes. Setting the value to zero enables the "last-value-queue" feature and disables quota checking. The default varies by platform. The default varies by platform.
	MaxSpoolUsage int64 `json:"maxSpoolUsage,omitempty"`

	// The maximum number of seconds that a message can stay in the Topic Endpoint when "respectTtlEnabled" is "true". A message will expire according to the lesser of the TTL in the message (assigned by the Publisher) and the "maxTtl" configured on the Topic Endpoint. "maxTtl" is a 32-bit integer value from 1 to 4294967295 representing the expiry time in seconds. A "maxTtl" of "0" disables this feature. The default value is `0`.
	MaxTTL int64 `json:"maxTtl,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The Client Username which owns the Topic Endpoint. The default value is `""`.
	Owner string `json:"owner,omitempty"`

	// Permission level for users of the Topic Endpoint, excluding the owner. The default value is `"no-access"`. The allowed values and their meaning are:
	//
	// <pre>
	// "no-access" - Disallows all access.
	// "read-only" - Read-only access to the messages in the Topic Endpoint.
	// "consume" - Consume (read and remove) messages in the Topic Endpoint.
	// "modify-topic" - Consume messages or modify the topic/selector of the Topic Endpoint.
	// "delete" - Consume messages, modify the topic/selector or delete the Topic Endpoint altogether.
	// </pre>
	//
	// Enum: [no-access read-only consume modify-topic delete]
	Permission string `json:"permission,omitempty"`

	// Enable or disable if low priority messages are subject to "rejectLowPriorityMsgLimit" checking. This may only be enabled if "rejectMsgToSenderOnDiscardBehavior" does not have a value of "never". The default value is `false`.
	RejectLowPriorityMsgEnabled bool `json:"rejectLowPriorityMsgEnabled,omitempty"`

	// The number of messages of any priority in the Topic Endpoint above which low priority messages are not admitted but higher priority messages are allowed. The default value is `0`.
	RejectLowPriorityMsgLimit int64 `json:"rejectLowPriorityMsgLimit,omitempty"`

	// The circumstances under which a negative acknowledgement (NACK) is sent to the client on discards. Note that NACKs cause the message to not be delivered to any destination and transacted-session commits to fail. This attribute may only have a value of "never" if "rejectLowPriorityMsgEnabled" is disabled. The default value is `"never"`. The allowed values and their meaning are:
	//
	// <pre>
	// "always" - Message discards always result in negative acknowledgments (NACKs) being returned to the sending client, even if the discard reason is that the topic-endpoint is disabled.
	// "when-topic-endpoint-enabled" - Message discards result in negative acknowledgments (NACKs) being returned to the sending client, except if the discard reason is that the Topic Endpoint is disabled.
	// "never" - Message discards never result in negative acknowledgments (NACKs) being returned to the sending client.
	// </pre>
	//
	// Enum: [always when-topic-endpoint-enabled never]
	RejectMsgToSenderOnDiscardBehavior string `json:"rejectMsgToSenderOnDiscardBehavior,omitempty"`

	// Enable or disable the respecting of message priority. If enabled, messages contained in the Topic Endpoint are delivered in priority order, from 9 (highest) to 0 (lowest). The default value is `false`. Available since 2.8.
	RespectMsgPriorityEnabled bool `json:"respectMsgPriorityEnabled,omitempty"`

	// Enable or disable the respecting of "time to live" (TTL). If enabled, then messages contained in the Topic Endpoint are checked for expiry. If expired, the message is removed from the Topic Endpoint and either discarded or a copy of the message placed in the #DEAD_MSG_QUEUE Endpoint. The default value is `false`.
	RespectTTLEnabled bool `json:"respectTtlEnabled,omitempty"`

	// The name of the Topic Endpoint.
	TopicEndpointName string `json:"topicEndpointName,omitempty"`
}

// Validate validates this msg vpn topic endpoint
func (m *MsgVpnTopicEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventBindCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventRejectLowPriorityMsgLimitThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventSpoolUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectMsgToSenderOnDiscardBehavior(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnTopicEndpointTypeAccessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["exclusive","non-exclusive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTopicEndpointTypeAccessTypePropEnum = append(msgVpnTopicEndpointTypeAccessTypePropEnum, v)
	}
}

const (

	// MsgVpnTopicEndpointAccessTypeExclusive captures enum value "exclusive"
	MsgVpnTopicEndpointAccessTypeExclusive string = "exclusive"

	// MsgVpnTopicEndpointAccessTypeNonExclusive captures enum value "non-exclusive"
	MsgVpnTopicEndpointAccessTypeNonExclusive string = "non-exclusive"
)

// prop value enum
func (m *MsgVpnTopicEndpoint) validateAccessTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTopicEndpointTypeAccessTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnTopicEndpoint) validateAccessType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessTypeEnum("accessType", "body", m.AccessType); err != nil {
		return err
	}

	return nil
}

func (m *MsgVpnTopicEndpoint) validateEventBindCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventBindCountThreshold) { // not required
		return nil
	}

	if m.EventBindCountThreshold != nil {
		if err := m.EventBindCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventBindCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnTopicEndpoint) validateEventRejectLowPriorityMsgLimitThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventRejectLowPriorityMsgLimitThreshold) { // not required
		return nil
	}

	if m.EventRejectLowPriorityMsgLimitThreshold != nil {
		if err := m.EventRejectLowPriorityMsgLimitThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventRejectLowPriorityMsgLimitThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnTopicEndpoint) validateEventSpoolUsageThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventSpoolUsageThreshold) { // not required
		return nil
	}

	if m.EventSpoolUsageThreshold != nil {
		if err := m.EventSpoolUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

var msgVpnTopicEndpointTypePermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["no-access","read-only","consume","modify-topic","delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTopicEndpointTypePermissionPropEnum = append(msgVpnTopicEndpointTypePermissionPropEnum, v)
	}
}

const (

	// MsgVpnTopicEndpointPermissionNoAccess captures enum value "no-access"
	MsgVpnTopicEndpointPermissionNoAccess string = "no-access"

	// MsgVpnTopicEndpointPermissionReadOnly captures enum value "read-only"
	MsgVpnTopicEndpointPermissionReadOnly string = "read-only"

	// MsgVpnTopicEndpointPermissionConsume captures enum value "consume"
	MsgVpnTopicEndpointPermissionConsume string = "consume"

	// MsgVpnTopicEndpointPermissionModifyTopic captures enum value "modify-topic"
	MsgVpnTopicEndpointPermissionModifyTopic string = "modify-topic"

	// MsgVpnTopicEndpointPermissionDelete captures enum value "delete"
	MsgVpnTopicEndpointPermissionDelete string = "delete"
)

// prop value enum
func (m *MsgVpnTopicEndpoint) validatePermissionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTopicEndpointTypePermissionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnTopicEndpoint) validatePermission(formats strfmt.Registry) error {

	if swag.IsZero(m.Permission) { // not required
		return nil
	}

	// value enum
	if err := m.validatePermissionEnum("permission", "body", m.Permission); err != nil {
		return err
	}

	return nil
}

var msgVpnTopicEndpointTypeRejectMsgToSenderOnDiscardBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","when-topic-endpoint-enabled","never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTopicEndpointTypeRejectMsgToSenderOnDiscardBehaviorPropEnum = append(msgVpnTopicEndpointTypeRejectMsgToSenderOnDiscardBehaviorPropEnum, v)
	}
}

const (

	// MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorAlways captures enum value "always"
	MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorAlways string = "always"

	// MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorWhenTopicEndpointEnabled captures enum value "when-topic-endpoint-enabled"
	MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorWhenTopicEndpointEnabled string = "when-topic-endpoint-enabled"

	// MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorNever captures enum value "never"
	MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorNever string = "never"
)

// prop value enum
func (m *MsgVpnTopicEndpoint) validateRejectMsgToSenderOnDiscardBehaviorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTopicEndpointTypeRejectMsgToSenderOnDiscardBehaviorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnTopicEndpoint) validateRejectMsgToSenderOnDiscardBehavior(formats strfmt.Registry) error {

	if swag.IsZero(m.RejectMsgToSenderOnDiscardBehavior) { // not required
		return nil
	}

	// value enum
	if err := m.validateRejectMsgToSenderOnDiscardBehaviorEnum("rejectMsgToSenderOnDiscardBehavior", "body", m.RejectMsgToSenderOnDiscardBehavior); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnTopicEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnTopicEndpoint) UnmarshalBinary(b []byte) error {
	var res MsgVpnTopicEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
