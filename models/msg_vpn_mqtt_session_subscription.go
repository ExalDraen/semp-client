// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnMqttSessionSubscription msg vpn mqtt session subscription
// swagger:model MsgVpnMqttSessionSubscription
type MsgVpnMqttSessionSubscription struct {

	// The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
	MqttSessionClientID string `json:"mqttSessionClientId,omitempty"`

	// The Virtual Router of the MQTT Session. The allowed values and their meaning are:
	//
	// <pre>
	// "primary" - The MQTT Session belongs to the primary Virtual Router.
	// "backup" - The MQTT Session belongs to the backup Virtual Router.
	// </pre>
	//
	// Enum: [primary backup]
	MqttSessionVirtualRouter string `json:"mqttSessionVirtualRouter,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The quality of service (QoS) for the subscription as either 0 (deliver at most once) or 1 (deliver at least once). QoS 2 is not supported, but QoS 2 messages attracted by QoS 0 or QoS 1 subscriptions are accepted and delivered accordingly. The default value is `0`.
	SubscriptionQos int64 `json:"subscriptionQos,omitempty"`

	// The MQTT subscription topic.
	SubscriptionTopic string `json:"subscriptionTopic,omitempty"`
}

// Validate validates this msg vpn mqtt session subscription
func (m *MsgVpnMqttSessionSubscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMqttSessionVirtualRouter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnMqttSessionSubscriptionTypeMqttSessionVirtualRouterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","backup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnMqttSessionSubscriptionTypeMqttSessionVirtualRouterPropEnum = append(msgVpnMqttSessionSubscriptionTypeMqttSessionVirtualRouterPropEnum, v)
	}
}

const (

	// MsgVpnMqttSessionSubscriptionMqttSessionVirtualRouterPrimary captures enum value "primary"
	MsgVpnMqttSessionSubscriptionMqttSessionVirtualRouterPrimary string = "primary"

	// MsgVpnMqttSessionSubscriptionMqttSessionVirtualRouterBackup captures enum value "backup"
	MsgVpnMqttSessionSubscriptionMqttSessionVirtualRouterBackup string = "backup"
)

// prop value enum
func (m *MsgVpnMqttSessionSubscription) validateMqttSessionVirtualRouterEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnMqttSessionSubscriptionTypeMqttSessionVirtualRouterPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnMqttSessionSubscription) validateMqttSessionVirtualRouter(formats strfmt.Registry) error {

	if swag.IsZero(m.MqttSessionVirtualRouter) { // not required
		return nil
	}

	// value enum
	if err := m.validateMqttSessionVirtualRouterEnum("mqttSessionVirtualRouter", "body", m.MqttSessionVirtualRouter); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnMqttSessionSubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnMqttSessionSubscription) UnmarshalBinary(b []byte) error {
	var res MsgVpnMqttSessionSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
