// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnMqttSession msg vpn mqtt session
// swagger:model MsgVpnMqttSession
type MsgVpnMqttSession struct {

	// Enable or disable the MQTT Session. When disabled a client attempting to connect to this session will be denied, and an existing connection will be closed. QoS 1 subscriptions of an MQTT Session will continue to attract messages while disabled. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// The client-id of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
	MqttSessionClientID string `json:"mqttSessionClientId,omitempty"`

	// The Virtual Router of the MQTT Session. The allowed values and their meaning are:
	//
	// <pre>
	// "primary" - MQTT Session belongs to the primary Virtual Router.
	// "backup" - MQTT Session belongs to the backup Virtual Router.
	// </pre>
	//
	// Enum: [primary backup]
	MqttSessionVirtualRouter string `json:"mqttSessionVirtualRouter,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The owner of the MQTT Session. For externally-created sessions this will be the Client Username of the connecting client. For management-created sessions this will be empty by default. In either case the owner can be changed by the administrator. The MQTT Session must be disabled to change its owner. The default value is `""`.
	Owner string `json:"owner,omitempty"`
}

// Validate validates this msg vpn mqtt session
func (m *MsgVpnMqttSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMqttSessionVirtualRouter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnMqttSessionTypeMqttSessionVirtualRouterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","backup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnMqttSessionTypeMqttSessionVirtualRouterPropEnum = append(msgVpnMqttSessionTypeMqttSessionVirtualRouterPropEnum, v)
	}
}

const (

	// MsgVpnMqttSessionMqttSessionVirtualRouterPrimary captures enum value "primary"
	MsgVpnMqttSessionMqttSessionVirtualRouterPrimary string = "primary"

	// MsgVpnMqttSessionMqttSessionVirtualRouterBackup captures enum value "backup"
	MsgVpnMqttSessionMqttSessionVirtualRouterBackup string = "backup"
)

// prop value enum
func (m *MsgVpnMqttSession) validateMqttSessionVirtualRouterEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnMqttSessionTypeMqttSessionVirtualRouterPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnMqttSession) validateMqttSessionVirtualRouter(formats strfmt.Registry) error {

	if swag.IsZero(m.MqttSessionVirtualRouter) { // not required
		return nil
	}

	// value enum
	if err := m.validateMqttSessionVirtualRouterEnum("mqttSessionVirtualRouter", "body", m.MqttSessionVirtualRouter); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnMqttSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnMqttSession) UnmarshalBinary(b []byte) error {
	var res MsgVpnMqttSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
