// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteMsgVpnQueueParams creates a new DeleteMsgVpnQueueParams object
// with the default values initialized.
func NewDeleteMsgVpnQueueParams() *DeleteMsgVpnQueueParams {
	var ()
	return &DeleteMsgVpnQueueParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteMsgVpnQueueParamsWithTimeout creates a new DeleteMsgVpnQueueParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteMsgVpnQueueParamsWithTimeout(timeout time.Duration) *DeleteMsgVpnQueueParams {
	var ()
	return &DeleteMsgVpnQueueParams{

		timeout: timeout,
	}
}

// NewDeleteMsgVpnQueueParamsWithContext creates a new DeleteMsgVpnQueueParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteMsgVpnQueueParamsWithContext(ctx context.Context) *DeleteMsgVpnQueueParams {
	var ()
	return &DeleteMsgVpnQueueParams{

		Context: ctx,
	}
}

// NewDeleteMsgVpnQueueParamsWithHTTPClient creates a new DeleteMsgVpnQueueParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteMsgVpnQueueParamsWithHTTPClient(client *http.Client) *DeleteMsgVpnQueueParams {
	var ()
	return &DeleteMsgVpnQueueParams{
		HTTPClient: client,
	}
}

/*DeleteMsgVpnQueueParams contains all the parameters to send to the API endpoint
for the delete msg vpn queue operation typically these are written to a http.Request
*/
type DeleteMsgVpnQueueParams struct {

	/*MsgVpnName
	  The name of the Message VPN.

	*/
	MsgVpnName string
	/*QueueName
	  The name of the Queue.

	*/
	QueueName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) WithTimeout(timeout time.Duration) *DeleteMsgVpnQueueParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) WithContext(ctx context.Context) *DeleteMsgVpnQueueParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) WithHTTPClient(client *http.Client) *DeleteMsgVpnQueueParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMsgVpnName adds the msgVpnName to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) WithMsgVpnName(msgVpnName string) *DeleteMsgVpnQueueParams {
	o.SetMsgVpnName(msgVpnName)
	return o
}

// SetMsgVpnName adds the msgVpnName to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) SetMsgVpnName(msgVpnName string) {
	o.MsgVpnName = msgVpnName
}

// WithQueueName adds the queueName to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) WithQueueName(queueName string) *DeleteMsgVpnQueueParams {
	o.SetQueueName(queueName)
	return o
}

// SetQueueName adds the queueName to the delete msg vpn queue params
func (o *DeleteMsgVpnQueueParams) SetQueueName(queueName string) {
	o.QueueName = queueName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteMsgVpnQueueParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param msgVpnName
	if err := r.SetPathParam("msgVpnName", o.MsgVpnName); err != nil {
		return err
	}

	// path param queueName
	if err := r.SetPathParam("queueName", o.QueueName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
