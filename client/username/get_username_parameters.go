// Code generated by go-swagger; DO NOT EDIT.

package username

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUsernameParams creates a new GetUsernameParams object
// with the default values initialized.
func NewGetUsernameParams() *GetUsernameParams {
	var ()
	return &GetUsernameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsernameParamsWithTimeout creates a new GetUsernameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUsernameParamsWithTimeout(timeout time.Duration) *GetUsernameParams {
	var ()
	return &GetUsernameParams{

		timeout: timeout,
	}
}

// NewGetUsernameParamsWithContext creates a new GetUsernameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUsernameParamsWithContext(ctx context.Context) *GetUsernameParams {
	var ()
	return &GetUsernameParams{

		Context: ctx,
	}
}

// NewGetUsernameParamsWithHTTPClient creates a new GetUsernameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUsernameParamsWithHTTPClient(client *http.Client) *GetUsernameParams {
	var ()
	return &GetUsernameParams{
		HTTPClient: client,
	}
}

/*GetUsernameParams contains all the parameters to send to the API endpoint
for the get username operation typically these are written to a http.Request
*/
type GetUsernameParams struct {

	/*Select
	  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the `select` parameter.

	*/
	Select []string
	/*UserName
	  Username.

	*/
	UserName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get username params
func (o *GetUsernameParams) WithTimeout(timeout time.Duration) *GetUsernameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get username params
func (o *GetUsernameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get username params
func (o *GetUsernameParams) WithContext(ctx context.Context) *GetUsernameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get username params
func (o *GetUsernameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get username params
func (o *GetUsernameParams) WithHTTPClient(client *http.Client) *GetUsernameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get username params
func (o *GetUsernameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSelect adds the selectVar to the get username params
func (o *GetUsernameParams) WithSelect(selectVar []string) *GetUsernameParams {
	o.SetSelect(selectVar)
	return o
}

// SetSelect adds the select to the get username params
func (o *GetUsernameParams) SetSelect(selectVar []string) {
	o.Select = selectVar
}

// WithUserName adds the userName to the get username params
func (o *GetUsernameParams) WithUserName(userName string) *GetUsernameParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the get username params
func (o *GetUsernameParams) SetUserName(userName string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsernameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesSelect := o.Select

	joinedSelect := swag.JoinByFormat(valuesSelect, "csv")
	// query array param select
	if err := r.SetQueryParam("select", joinedSelect...); err != nil {
		return err
	}

	// path param userName
	if err := r.SetPathParam("userName", o.UserName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
