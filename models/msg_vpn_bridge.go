// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnBridge msg vpn bridge
// swagger:model MsgVpnBridge
type MsgVpnBridge struct {

	// The name of the Bridge.
	BridgeName string `json:"bridgeName,omitempty"`

	// Specify whether the Bridge is configured for the primary or backup Virtual Router or auto configured. The allowed values and their meaning are:
	//
	// <pre>
	// "primary" - The Bridge is used for the primary Virtual Router.
	// "backup" - The Bridge is used for the backup Virtual Router.
	// "auto" - The Bridge is automatically assigned a Router.
	// </pre>
	//
	// Enum: [primary backup auto]
	BridgeVirtualRouter string `json:"bridgeVirtualRouter,omitempty"`

	// Enable or disable the Bridge. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// The maximum number of hops (intermediate routers through which data must pass between source and destination) that can occur before the message is discarded. When the Bridge sends a message to the remote router, the message TTL value is assigned to the lower of the message current TTL or this value. The default value is `8`.
	MaxTTL int64 `json:"maxTtl,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The Client Username that the Bridge uses to login to the Remote Message VPN. The default value is `""`.
	RemoteAuthenticationBasicClientUsername string `json:"remoteAuthenticationBasicClientUsername,omitempty"`

	// The password the Message VPN Bridge uses to login to the Remote Message VPN. The default is to have no `remoteAuthenticationBasicPassword`.
	RemoteAuthenticationBasicPassword string `json:"remoteAuthenticationBasicPassword,omitempty"`

	// The PEM formatted content for the client certificate used by this bridge to login to the Remote Message VPN. It must consist of a private key and between one and three certificates comprising the certificate trust chain. The default value is `""`. Available since 2.9.
	RemoteAuthenticationClientCertContent string `json:"remoteAuthenticationClientCertContent,omitempty"`

	// The password for the client certificate used by this bridge to login to the Remote Message VPN. The default value is `""`. Available since 2.9.
	RemoteAuthenticationClientCertPassword string `json:"remoteAuthenticationClientCertPassword,omitempty"`

	// The authentication scheme for the Remote Message VPN. The default value is `"basic"`. The allowed values and their meaning are:
	//
	// <pre>
	// "basic" - Basic Authentication Scheme (via username and password).
	// "client-certificate" - Client Certificate Authentication Scheme (via certificate file or content).
	// </pre>
	//
	// Enum: [basic client-certificate]
	RemoteAuthenticationScheme string `json:"remoteAuthenticationScheme,omitempty"`

	// The maximum number of attempts to establish a connection to the Remote Message VPN. The default value is `0`.
	RemoteConnectionRetryCount int64 `json:"remoteConnectionRetryCount,omitempty"`

	// The amount of time before making another attempt to connect to the Remote Message VPN after a failed one, in seconds. The default value is `3`.
	RemoteConnectionRetryDelay int64 `json:"remoteConnectionRetryDelay,omitempty"`

	// The priority for deliver-to-one (DTO) messages sent from the Remote Message VPN to the Message VPN Bridge. The default value is `"p1"`. The allowed values and their meaning are:
	//
	// <pre>
	// "p1" - Priority 1 (highest).
	// "p2" - Priority 2.
	// "p3" - Priority 3.
	// "p4" - Priority 4 (lowest).
	// "da" - Deliver Always.
	// </pre>
	//
	// Enum: [p1 p2 p3 p4 da]
	RemoteDeliverToOnePriority string `json:"remoteDeliverToOnePriority,omitempty"`

	// The list of cipher suites supported for TLS connections to the Remote Message VPN. The default value is `"default"`.
	TLSCipherSuiteList string `json:"tlsCipherSuiteList,omitempty"`
}

// Validate validates this msg vpn bridge
func (m *MsgVpnBridge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBridgeVirtualRouter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteAuthenticationScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteDeliverToOnePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnBridgeTypeBridgeVirtualRouterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","backup","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnBridgeTypeBridgeVirtualRouterPropEnum = append(msgVpnBridgeTypeBridgeVirtualRouterPropEnum, v)
	}
}

const (

	// MsgVpnBridgeBridgeVirtualRouterPrimary captures enum value "primary"
	MsgVpnBridgeBridgeVirtualRouterPrimary string = "primary"

	// MsgVpnBridgeBridgeVirtualRouterBackup captures enum value "backup"
	MsgVpnBridgeBridgeVirtualRouterBackup string = "backup"

	// MsgVpnBridgeBridgeVirtualRouterAuto captures enum value "auto"
	MsgVpnBridgeBridgeVirtualRouterAuto string = "auto"
)

// prop value enum
func (m *MsgVpnBridge) validateBridgeVirtualRouterEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnBridgeTypeBridgeVirtualRouterPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnBridge) validateBridgeVirtualRouter(formats strfmt.Registry) error {

	if swag.IsZero(m.BridgeVirtualRouter) { // not required
		return nil
	}

	// value enum
	if err := m.validateBridgeVirtualRouterEnum("bridgeVirtualRouter", "body", m.BridgeVirtualRouter); err != nil {
		return err
	}

	return nil
}

var msgVpnBridgeTypeRemoteAuthenticationSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","client-certificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnBridgeTypeRemoteAuthenticationSchemePropEnum = append(msgVpnBridgeTypeRemoteAuthenticationSchemePropEnum, v)
	}
}

const (

	// MsgVpnBridgeRemoteAuthenticationSchemeBasic captures enum value "basic"
	MsgVpnBridgeRemoteAuthenticationSchemeBasic string = "basic"

	// MsgVpnBridgeRemoteAuthenticationSchemeClientCertificate captures enum value "client-certificate"
	MsgVpnBridgeRemoteAuthenticationSchemeClientCertificate string = "client-certificate"
)

// prop value enum
func (m *MsgVpnBridge) validateRemoteAuthenticationSchemeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnBridgeTypeRemoteAuthenticationSchemePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnBridge) validateRemoteAuthenticationScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.RemoteAuthenticationScheme) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteAuthenticationSchemeEnum("remoteAuthenticationScheme", "body", m.RemoteAuthenticationScheme); err != nil {
		return err
	}

	return nil
}

var msgVpnBridgeTypeRemoteDeliverToOnePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["p1","p2","p3","p4","da"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnBridgeTypeRemoteDeliverToOnePriorityPropEnum = append(msgVpnBridgeTypeRemoteDeliverToOnePriorityPropEnum, v)
	}
}

const (

	// MsgVpnBridgeRemoteDeliverToOnePriorityP1 captures enum value "p1"
	MsgVpnBridgeRemoteDeliverToOnePriorityP1 string = "p1"

	// MsgVpnBridgeRemoteDeliverToOnePriorityP2 captures enum value "p2"
	MsgVpnBridgeRemoteDeliverToOnePriorityP2 string = "p2"

	// MsgVpnBridgeRemoteDeliverToOnePriorityP3 captures enum value "p3"
	MsgVpnBridgeRemoteDeliverToOnePriorityP3 string = "p3"

	// MsgVpnBridgeRemoteDeliverToOnePriorityP4 captures enum value "p4"
	MsgVpnBridgeRemoteDeliverToOnePriorityP4 string = "p4"

	// MsgVpnBridgeRemoteDeliverToOnePriorityDa captures enum value "da"
	MsgVpnBridgeRemoteDeliverToOnePriorityDa string = "da"
)

// prop value enum
func (m *MsgVpnBridge) validateRemoteDeliverToOnePriorityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnBridgeTypeRemoteDeliverToOnePriorityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnBridge) validateRemoteDeliverToOnePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.RemoteDeliverToOnePriority) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteDeliverToOnePriorityEnum("remoteDeliverToOnePriority", "body", m.RemoteDeliverToOnePriority); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnBridge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnBridge) UnmarshalBinary(b []byte) error {
	var res MsgVpnBridge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
