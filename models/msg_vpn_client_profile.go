// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MsgVpnClientProfile msg vpn client profile
// swagger:model MsgVpnClientProfile
type MsgVpnClientProfile struct {

	// Allow or deny Bridge clients to connect. Changing this setting does not affect existing Bridge client connections. The default value is `false`.
	AllowBridgeConnectionsEnabled bool `json:"allowBridgeConnectionsEnabled,omitempty"`

	// Allow or deny clients to bind to topic endpoints or queues with the cut-through delivery mode. Changing this setting does not affect existing client connections. The default value is `false`.
	AllowCutThroughForwardingEnabled bool `json:"allowCutThroughForwardingEnabled,omitempty"`

	// Allow or deny clients to create topic endponts or queues. Changing this setting does not affect existing client connections. The default value is `false`.
	AllowGuaranteedEndpointCreateEnabled bool `json:"allowGuaranteedEndpointCreateEnabled,omitempty"`

	// Allow or deny clients to receive guaranteed messages. Changing this setting does not affect existing client connections. The default value is `false`.
	AllowGuaranteedMsgReceiveEnabled bool `json:"allowGuaranteedMsgReceiveEnabled,omitempty"`

	// Allow or deny clients to send guaranteed messages. Changing this setting does not affect existing client connections. The default value is `false`.
	AllowGuaranteedMsgSendEnabled bool `json:"allowGuaranteedMsgSendEnabled,omitempty"`

	// Allow or deny clients to establish transacted sessions. Changing this setting does not affect existing client connections. The default value is `false`.
	AllowTransactedSessionsEnabled bool `json:"allowTransactedSessionsEnabled,omitempty"`

	// The name of a Queue to copy settings from when a new Queue is created by an API. The referenced Queue must exist on the Message VPN. The default value is `""`.
	APIQueueManagementCopyFromOnCreateName string `json:"apiQueueManagementCopyFromOnCreateName,omitempty"`

	// The name of a Topic Endpoint to copy settings from when a new Topic Endpoint is created by an API. The referenced Topic Endpoint must exist on the Message VPN. The default value is `""`.
	APITopicEndpointManagementCopyFromOnCreateName string `json:"apiTopicEndpointManagementCopyFromOnCreateName,omitempty"`

	// The Client Profile name.
	ClientProfileName string `json:"clientProfileName,omitempty"`

	// The amount of time to delay the delivery of messages to clients after the initial message has been delivered (the eliding delay interval), in milliseconds. Zero value means there is no delay in delivering messages to clients. The default value is `0`.
	ElidingDelay int64 `json:"elidingDelay,omitempty"`

	// Enable or disable the Message Eliding. The default value is `false`.
	ElidingEnabled bool `json:"elidingEnabled,omitempty"`

	// The maximum number of topics tracked for Message Eliding per one Client connection. The default value is `256`.
	ElidingMaxTopicCount int64 `json:"elidingMaxTopicCount,omitempty"`

	// event client provisioned endpoint spool usage threshold
	EventClientProvisionedEndpointSpoolUsageThreshold *EventThresholdByPercent `json:"eventClientProvisionedEndpointSpoolUsageThreshold,omitempty"`

	// event connection count per client username threshold
	EventConnectionCountPerClientUsernameThreshold *EventThreshold `json:"eventConnectionCountPerClientUsernameThreshold,omitempty"`

	// event egress flow count threshold
	EventEgressFlowCountThreshold *EventThreshold `json:"eventEgressFlowCountThreshold,omitempty"`

	// event endpoint count per client username threshold
	EventEndpointCountPerClientUsernameThreshold *EventThreshold `json:"eventEndpointCountPerClientUsernameThreshold,omitempty"`

	// event ingress flow count threshold
	EventIngressFlowCountThreshold *EventThreshold `json:"eventIngressFlowCountThreshold,omitempty"`

	// event service smf connection count per client username threshold
	EventServiceSmfConnectionCountPerClientUsernameThreshold *EventThreshold `json:"eventServiceSmfConnectionCountPerClientUsernameThreshold,omitempty"`

	// event service web connection count per client username threshold
	EventServiceWebConnectionCountPerClientUsernameThreshold *EventThreshold `json:"eventServiceWebConnectionCountPerClientUsernameThreshold,omitempty"`

	// event subscription count threshold
	EventSubscriptionCountThreshold *EventThreshold `json:"eventSubscriptionCountThreshold,omitempty"`

	// event transacted session count threshold
	EventTransactedSessionCountThreshold *EventThreshold `json:"eventTransactedSessionCountThreshold,omitempty"`

	// event transaction count threshold
	EventTransactionCountThreshold *EventThreshold `json:"eventTransactionCountThreshold,omitempty"`

	// The maximum number of client connections that can be simultaneously connected with the same Client Username. The default is the max value supported by the hardware.
	MaxConnectionCountPerClientUsername int64 `json:"maxConnectionCountPerClientUsername,omitempty"`

	// The maximum number of egress flows that can be created by one client. The default is the max value supported by the hardware.
	MaxEgressFlowCount int64 `json:"maxEgressFlowCount,omitempty"`

	// The maximum number of queues and topic endpoints that can be created by clients with the same Client Username. The default is the max value supported by the hardware.
	MaxEndpointCountPerClientUsername int64 `json:"maxEndpointCountPerClientUsername,omitempty"`

	// The maximum number of ingress flows that can be created by one client. The default is the max value supported by the hardware.
	MaxIngressFlowCount int64 `json:"maxIngressFlowCount,omitempty"`

	// The maximum number of subscriptions that can be created by one client. The default varies by platform.
	MaxSubscriptionCount int64 `json:"maxSubscriptionCount,omitempty"`

	// The maximum number of transacted sessions that can be created by one client. The default value is `10`.
	MaxTransactedSessionCount int64 `json:"maxTransactedSessionCount,omitempty"`

	// The maximum number of transactions that can be created by one client. The default varies by platform.
	MaxTransactionCount int64 `json:"maxTransactionCount,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The maximum depth of the "Control 1" (C-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueControl1MaxDepth int32 `json:"queueControl1MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Control 1" (C-1) priority queue, regardless of the "queueControl1MaxDepth" value. The default value is `4`.
	QueueControl1MinMsgBurst int32 `json:"queueControl1MinMsgBurst,omitempty"`

	// The maximum depth of the "Direct 1" (D-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueDirect1MaxDepth int32 `json:"queueDirect1MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Direct 1" (D-1) priority queue, regardless of the "queueDirect1MaxDepth" value. The default value is `4`.
	QueueDirect1MinMsgBurst int32 `json:"queueDirect1MinMsgBurst,omitempty"`

	// The maximum depth of the "Direct 2" (D-2) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueDirect2MaxDepth int32 `json:"queueDirect2MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Direct 2" (D-2) priority queue, regardless of the "queueDirect2MaxDepth" value. The default value is `4`.
	QueueDirect2MinMsgBurst int32 `json:"queueDirect2MinMsgBurst,omitempty"`

	// The maximum depth of the "Direct 3" (D-3) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueDirect3MaxDepth int32 `json:"queueDirect3MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Direct 3" (D-3) priority queue, regardless of the "queueDirect3MaxDepth" value. The default value is `4`.
	QueueDirect3MinMsgBurst int32 `json:"queueDirect3MinMsgBurst,omitempty"`

	// The maximum depth of the "Guaranteed 1" (G-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	QueueGuaranteed1MaxDepth int32 `json:"queueGuaranteed1MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Guaranteed 1" (G-3) priority queue, regardless of the "queueGuaranteed1MaxDepth" value. The default value is `255`.
	QueueGuaranteed1MinMsgBurst int32 `json:"queueGuaranteed1MinMsgBurst,omitempty"`

	// Enable or disable sending of a negative acknowledgement (NACK) on the discard of a message because of a message subscription was not found. The default value is `false`. Available since 2.2.
	RejectMsgToSenderOnNoSubscriptionMatchEnabled bool `json:"rejectMsgToSenderOnNoSubscriptionMatchEnabled,omitempty"`

	// Allow or deny clients to connect to the Message VPN if its Replication state is standby. The default value is `false`.
	ReplicationAllowClientConnectWhenStandbyEnabled bool `json:"replicationAllowClientConnectWhenStandbyEnabled,omitempty"`

	// The maximum number of SMF client connections that can be simultaneously connected with the same Client Username. The default is the max value supported by the hardware.
	ServiceSmfMaxConnectionCountPerClientUsername int64 `json:"serviceSmfMaxConnectionCountPerClientUsername,omitempty"`

	// The timeout for inactive Web Transport client sessions, in seconds. The default value is `30`.
	ServiceWebInactiveTimeout int64 `json:"serviceWebInactiveTimeout,omitempty"`

	// The maximum number of Web Transport client connections that can be simultaneously connected with the same Client Username. The default is the max value supported by the hardware.
	ServiceWebMaxConnectionCountPerClientUsername int64 `json:"serviceWebMaxConnectionCountPerClientUsername,omitempty"`

	// The maximum Web Transport payload size before its fragmentation occurs, in bytes. The size of the header is not included. The default value is `1000000`.
	ServiceWebMaxPayload int64 `json:"serviceWebMaxPayload,omitempty"`

	// The TCP initial congestion window size, in multiple of the TCP Maximum Segment Size (MSS). Changing the value from its default of 2 results in non-compliance with RFC 2581. Contact Solace Support before changing this value. The default value is `2`.
	TCPCongestionWindowSize int64 `json:"tcpCongestionWindowSize,omitempty"`

	// The number of TCP keepalive retransmissions to be carried out before declaring that the remote end is not available. The default value is `5`.
	TCPKeepaliveCount int64 `json:"tcpKeepaliveCount,omitempty"`

	// The amount of time a connection must remain idle before TCP begins sending keepalive probes, in seconds. The default value is `3`.
	TCPKeepaliveIDLETime int64 `json:"tcpKeepaliveIdleTime,omitempty"`

	// The amount of time between TCP keepalive retransmissions when no acknowledgement is received, in seconds. The default value is `1`.
	TCPKeepaliveInterval int64 `json:"tcpKeepaliveInterval,omitempty"`

	// The TCP maximum segment size, in kilobytes. Changes are applied to all existing connections. The default value is `1460`.
	TCPMaxSegmentSize int64 `json:"tcpMaxSegmentSize,omitempty"`

	// The TCP maximum window size, in kilobytes. Changes are applied to all existing connections. The default value is `256`.
	TCPMaxWindowSize int64 `json:"tcpMaxWindowSize,omitempty"`

	// Enable or disable allowing a client to downgrade an encrypted connection to plain text. The default value is `true`. Available since 2.8.
	TLSAllowDowngradeToPlainTextEnabled bool `json:"tlsAllowDowngradeToPlainTextEnabled,omitempty"`
}

// Validate validates this msg vpn client profile
func (m *MsgVpnClientProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventClientProvisionedEndpointSpoolUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventConnectionCountPerClientUsernameThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventEgressFlowCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventEndpointCountPerClientUsernameThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventIngressFlowCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceSmfConnectionCountPerClientUsernameThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceWebConnectionCountPerClientUsernameThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventSubscriptionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTransactedSessionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTransactionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MsgVpnClientProfile) validateEventClientProvisionedEndpointSpoolUsageThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventClientProvisionedEndpointSpoolUsageThreshold) { // not required
		return nil
	}

	if m.EventClientProvisionedEndpointSpoolUsageThreshold != nil {
		if err := m.EventClientProvisionedEndpointSpoolUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventClientProvisionedEndpointSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventConnectionCountPerClientUsernameThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventConnectionCountPerClientUsernameThreshold) { // not required
		return nil
	}

	if m.EventConnectionCountPerClientUsernameThreshold != nil {
		if err := m.EventConnectionCountPerClientUsernameThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventConnectionCountPerClientUsernameThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventEgressFlowCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventEgressFlowCountThreshold) { // not required
		return nil
	}

	if m.EventEgressFlowCountThreshold != nil {
		if err := m.EventEgressFlowCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEgressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventEndpointCountPerClientUsernameThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventEndpointCountPerClientUsernameThreshold) { // not required
		return nil
	}

	if m.EventEndpointCountPerClientUsernameThreshold != nil {
		if err := m.EventEndpointCountPerClientUsernameThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEndpointCountPerClientUsernameThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventIngressFlowCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventIngressFlowCountThreshold) { // not required
		return nil
	}

	if m.EventIngressFlowCountThreshold != nil {
		if err := m.EventIngressFlowCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventIngressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventServiceSmfConnectionCountPerClientUsernameThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventServiceSmfConnectionCountPerClientUsernameThreshold) { // not required
		return nil
	}

	if m.EventServiceSmfConnectionCountPerClientUsernameThreshold != nil {
		if err := m.EventServiceSmfConnectionCountPerClientUsernameThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceSmfConnectionCountPerClientUsernameThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventServiceWebConnectionCountPerClientUsernameThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventServiceWebConnectionCountPerClientUsernameThreshold) { // not required
		return nil
	}

	if m.EventServiceWebConnectionCountPerClientUsernameThreshold != nil {
		if err := m.EventServiceWebConnectionCountPerClientUsernameThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceWebConnectionCountPerClientUsernameThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventSubscriptionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventSubscriptionCountThreshold) { // not required
		return nil
	}

	if m.EventSubscriptionCountThreshold != nil {
		if err := m.EventSubscriptionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventSubscriptionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventTransactedSessionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTransactedSessionCountThreshold) { // not required
		return nil
	}

	if m.EventTransactedSessionCountThreshold != nil {
		if err := m.EventTransactedSessionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTransactedSessionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnClientProfile) validateEventTransactionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTransactionCountThreshold) { // not required
		return nil
	}

	if m.EventTransactionCountThreshold != nil {
		if err := m.EventTransactionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTransactionCountThreshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnClientProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnClientProfile) UnmarshalBinary(b []byte) error {
	var res MsgVpnClientProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
