// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnTopicEndpoint msg vpn topic endpoint
// swagger:model MsgVpnTopicEndpoint
type MsgVpnTopicEndpoint struct {

	// The access type for delivering messages to consumer flows bound to the Topic Endpoint. The default value is `"exclusive"`. The allowed values and their meaning are:
	//
	// <pre>
	// "exclusive" - Exclusive delivery of messages to the first bound consumer flow.
	// "non-exclusive" - Non-exclusive delivery of messages to all bound consumer flows in a round-robin fashion.
	// </pre>
	//  Available since 2.4.
	// Enum: [exclusive non-exclusive]
	AccessType string `json:"accessType,omitempty"`

	// Enable or disable the propagation of consumer acknowledgements (ACKs) received on the active replication Message VPN to the standby replication Message VPN. The default value is `true`.
	ConsumerAckPropagationEnabled bool `json:"consumerAckPropagationEnabled,omitempty"`

	// The name of the Dead Message Queue (DMQ) used by the Topic Endpoint. The default value is `"#DEAD_MSG_QUEUE"`. Available since 2.2.
	DeadMsgQueue string `json:"deadMsgQueue,omitempty"`

	// Enable or disable the transmission of messages from the Topic Endpoint. The default value is `false`.
	EgressEnabled bool `json:"egressEnabled,omitempty"`

	// event bind count threshold
	EventBindCountThreshold *EventThreshold `json:"eventBindCountThreshold,omitempty"`

	// event reject low priority msg limit threshold
	EventRejectLowPriorityMsgLimitThreshold *EventThreshold `json:"eventRejectLowPriorityMsgLimitThreshold,omitempty"`

	// event spool usage threshold
	EventSpoolUsageThreshold *EventThreshold `json:"eventSpoolUsageThreshold,omitempty"`

	// Enable or disable the reception of messages to the Topic Endpoint. The default value is `false`.
	IngressEnabled bool `json:"ingressEnabled,omitempty"`

	// The maximum number of consumer flows that can bind to the Topic Endpoint. The default value is `1`. Available since 2.4.
	MaxBindCount int64 `json:"maxBindCount,omitempty"`

	// The maximum number of messages delivered but not acknowledged per flow for the Topic Endpoint. The default is the max value supported by the platform.
	MaxDeliveredUnackedMsgsPerFlow int64 `json:"maxDeliveredUnackedMsgsPerFlow,omitempty"`

	// The maximum message size allowed in the Topic Endpoint, in bytes (B). The default value is `10000000`.
	MaxMsgSize int32 `json:"maxMsgSize,omitempty"`

	// The maximum number of times the Topic Endpoint will attempt redelivery of a message prior to it being discarded or moved to the DMQ. A value of 0 means to retry forever. The default value is `0`.
	MaxRedeliveryCount int64 `json:"maxRedeliveryCount,omitempty"`

	// The maximum message spool usage allowed by the Topic Endpoint, in megabytes (MB). A value of 0 only allows spooling of the last message received and disables quota checking. The default varies by platform.
	MaxSpoolUsage int64 `json:"maxSpoolUsage,omitempty"`

	// The maximum time in seconds a message can stay in the Topic Endpoint when `respectTtlEnabled` is `"true"`. A message expires when the lesser of the sender assigned time-to-live (TTL) in the message and the `maxTtl` configured for the Topic Endpoint, is exceeded. A value of 0 disables expiry. The default value is `0`.
	MaxTTL int64 `json:"maxTtl,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The Client Username that owns the Topic Endpoint and has permission equivalent to `"delete"`. The default value is `""`.
	Owner string `json:"owner,omitempty"`

	// The permission level for all consumers of the Topic Endpoint, excluding the owner. The default value is `"no-access"`. The allowed values and their meaning are:
	//
	// <pre>
	// "no-access" - Disallows all access.
	// "read-only" - Read-only access to the messages.
	// "consume" - Consume (read and remove) messages.
	// "modify-topic" - Consume messages or modify the topic/selector.
	// "delete" - Consume messages, modify the topic/selector or delete the Client created endpoint altogether.
	// </pre>
	//
	// Enum: [no-access read-only consume modify-topic delete]
	Permission string `json:"permission,omitempty"`

	// Enable or disable the checking of low priority messages against the `rejectLowPriorityMsgLimit`. This may only be enabled if `rejectMsgToSenderOnDiscardBehavior` does not have a value of `"never"`. The default value is `false`.
	RejectLowPriorityMsgEnabled bool `json:"rejectLowPriorityMsgEnabled,omitempty"`

	// The number of messages of any priority in the Topic Endpoint above which low priority messages are not admitted but higher priority messages are allowed. The default value is `0`.
	RejectLowPriorityMsgLimit int64 `json:"rejectLowPriorityMsgLimit,omitempty"`

	// Determines when to return negative acknowledgements (NACKs) to sending clients on message discards. Note that NACKs cause the message to not be delivered to any destination and Transacted Session commits to fail. The default value is `"never"`. The allowed values and their meaning are:
	//
	// <pre>
	// "always" - Always return a negative acknowledgment (NACK) to the sending client on message discard.
	// "when-topic-endpoint-enabled" - Only return a negative acknowledgment (NACK) to the sending client on message discard when the Topic Endpoint is enabled.
	// "never" - Never return a negative acknowledgment (NACK) to the sending client on message discard.
	// </pre>
	//
	// Enum: [always when-topic-endpoint-enabled never]
	RejectMsgToSenderOnDiscardBehavior string `json:"rejectMsgToSenderOnDiscardBehavior,omitempty"`

	// Enable or disable the respecting of message priority. When enabled, messages contained in the Topic Endpoint are delivered in priority order, from 9 (highest) to 0 (lowest). The default value is `false`. Available since 2.8.
	RespectMsgPriorityEnabled bool `json:"respectMsgPriorityEnabled,omitempty"`

	// Enable or disable the respecting of the time-to-live (TTL) for messages in the Topic Endpoint. When enabled, expired messages are discarded or moved to the DMQ. The default value is `false`.
	RespectTTLEnabled bool `json:"respectTtlEnabled,omitempty"`

	// The name of the Topic Endpoint.
	TopicEndpointName string `json:"topicEndpointName,omitempty"`
}

// Validate validates this msg vpn topic endpoint
func (m *MsgVpnTopicEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventBindCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventRejectLowPriorityMsgLimitThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventSpoolUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectMsgToSenderOnDiscardBehavior(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnTopicEndpointTypeAccessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["exclusive","non-exclusive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTopicEndpointTypeAccessTypePropEnum = append(msgVpnTopicEndpointTypeAccessTypePropEnum, v)
	}
}

const (

	// MsgVpnTopicEndpointAccessTypeExclusive captures enum value "exclusive"
	MsgVpnTopicEndpointAccessTypeExclusive string = "exclusive"

	// MsgVpnTopicEndpointAccessTypeNonExclusive captures enum value "non-exclusive"
	MsgVpnTopicEndpointAccessTypeNonExclusive string = "non-exclusive"
)

// prop value enum
func (m *MsgVpnTopicEndpoint) validateAccessTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTopicEndpointTypeAccessTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnTopicEndpoint) validateAccessType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessTypeEnum("accessType", "body", m.AccessType); err != nil {
		return err
	}

	return nil
}

func (m *MsgVpnTopicEndpoint) validateEventBindCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventBindCountThreshold) { // not required
		return nil
	}

	if m.EventBindCountThreshold != nil {
		if err := m.EventBindCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventBindCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnTopicEndpoint) validateEventRejectLowPriorityMsgLimitThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventRejectLowPriorityMsgLimitThreshold) { // not required
		return nil
	}

	if m.EventRejectLowPriorityMsgLimitThreshold != nil {
		if err := m.EventRejectLowPriorityMsgLimitThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventRejectLowPriorityMsgLimitThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnTopicEndpoint) validateEventSpoolUsageThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventSpoolUsageThreshold) { // not required
		return nil
	}

	if m.EventSpoolUsageThreshold != nil {
		if err := m.EventSpoolUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

var msgVpnTopicEndpointTypePermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["no-access","read-only","consume","modify-topic","delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTopicEndpointTypePermissionPropEnum = append(msgVpnTopicEndpointTypePermissionPropEnum, v)
	}
}

const (

	// MsgVpnTopicEndpointPermissionNoAccess captures enum value "no-access"
	MsgVpnTopicEndpointPermissionNoAccess string = "no-access"

	// MsgVpnTopicEndpointPermissionReadOnly captures enum value "read-only"
	MsgVpnTopicEndpointPermissionReadOnly string = "read-only"

	// MsgVpnTopicEndpointPermissionConsume captures enum value "consume"
	MsgVpnTopicEndpointPermissionConsume string = "consume"

	// MsgVpnTopicEndpointPermissionModifyTopic captures enum value "modify-topic"
	MsgVpnTopicEndpointPermissionModifyTopic string = "modify-topic"

	// MsgVpnTopicEndpointPermissionDelete captures enum value "delete"
	MsgVpnTopicEndpointPermissionDelete string = "delete"
)

// prop value enum
func (m *MsgVpnTopicEndpoint) validatePermissionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTopicEndpointTypePermissionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnTopicEndpoint) validatePermission(formats strfmt.Registry) error {

	if swag.IsZero(m.Permission) { // not required
		return nil
	}

	// value enum
	if err := m.validatePermissionEnum("permission", "body", m.Permission); err != nil {
		return err
	}

	return nil
}

var msgVpnTopicEndpointTypeRejectMsgToSenderOnDiscardBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","when-topic-endpoint-enabled","never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTopicEndpointTypeRejectMsgToSenderOnDiscardBehaviorPropEnum = append(msgVpnTopicEndpointTypeRejectMsgToSenderOnDiscardBehaviorPropEnum, v)
	}
}

const (

	// MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorAlways captures enum value "always"
	MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorAlways string = "always"

	// MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorWhenTopicEndpointEnabled captures enum value "when-topic-endpoint-enabled"
	MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorWhenTopicEndpointEnabled string = "when-topic-endpoint-enabled"

	// MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorNever captures enum value "never"
	MsgVpnTopicEndpointRejectMsgToSenderOnDiscardBehaviorNever string = "never"
)

// prop value enum
func (m *MsgVpnTopicEndpoint) validateRejectMsgToSenderOnDiscardBehaviorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTopicEndpointTypeRejectMsgToSenderOnDiscardBehaviorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnTopicEndpoint) validateRejectMsgToSenderOnDiscardBehavior(formats strfmt.Registry) error {

	if swag.IsZero(m.RejectMsgToSenderOnDiscardBehavior) { // not required
		return nil
	}

	// value enum
	if err := m.validateRejectMsgToSenderOnDiscardBehaviorEnum("rejectMsgToSenderOnDiscardBehavior", "body", m.RejectMsgToSenderOnDiscardBehavior); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnTopicEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnTopicEndpoint) UnmarshalBinary(b []byte) error {
	var res MsgVpnTopicEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
