// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateMsgVpnACLProfile creates an ACL profile object

Creates an ACL Profile object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x|||
msgVpnName|x||x||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnACLProfile(params *CreateMsgVpnACLProfileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnACLProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnACLProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnAclProfile",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnACLProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnACLProfileOK), nil

}

/*
CreateMsgVpnACLProfileClientConnectException creates a client connect exception object

Creates a Client Connect Exception object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x||
clientConnectExceptionAddress|x|x|||
msgVpnName|x||x||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnACLProfileClientConnectException(params *CreateMsgVpnACLProfileClientConnectExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnACLProfileClientConnectExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnACLProfileClientConnectExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnAclProfileClientConnectException",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnACLProfileClientConnectExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnACLProfileClientConnectExceptionOK), nil

}

/*
CreateMsgVpnACLProfilePublishException creates a publish topic exception object

Creates a Publish Topic Exception object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x||
msgVpnName|x||x||
publishExceptionTopic|x|x|||
topicSyntax|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnACLProfilePublishException(params *CreateMsgVpnACLProfilePublishExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnACLProfilePublishExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnACLProfilePublishExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnAclProfilePublishException",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnACLProfilePublishExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnACLProfilePublishExceptionOK), nil

}

/*
CreateMsgVpnACLProfileSubscribeException creates a subscribe topic exception object

Creates a Subscribe Topic Exception object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName|x||x||
msgVpnName|x||x||
subscribeExceptionTopic|x|x|||
topicSyntax|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnACLProfileSubscribeException(params *CreateMsgVpnACLProfileSubscribeExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnACLProfileSubscribeExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnACLProfileSubscribeExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnAclProfileSubscribeException",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnACLProfileSubscribeExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnACLProfileSubscribeExceptionOK), nil

}

/*
CreateMsgVpnAuthorizationGroup creates an l d a p authorization group object

Creates an LDAP Authorization Group object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authorizationGroupName|x|x|||
msgVpnName|x||x||
orderAfterAuthorizationGroupName||||x|
orderBeforeAuthorizationGroupName||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnAuthorizationGroup(params *CreateMsgVpnAuthorizationGroupParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnAuthorizationGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnAuthorizationGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnAuthorizationGroup",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/authorizationGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnAuthorizationGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnAuthorizationGroupOK), nil

}

/*
CreateMsgVpnBridge creates a bridge object

Creates a Bridge object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x|||
bridgeVirtualRouter|x|x|||
msgVpnName|x||x||
remoteAuthenticationBasicPassword||||x|
remoteAuthenticationClientCertContent||||x|
remoteAuthenticationClientCertPassword||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnBridge(params *CreateMsgVpnBridgeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnBridgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnBridgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnBridge",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnBridgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnBridgeOK), nil

}

/*
CreateMsgVpnBridgeRemoteMsgVpn creates a remote message v p n object

Creates a Remote Message VPN object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x||
bridgeVirtualRouter|x||x||
msgVpnName|x||x||
password||||x|
remoteMsgVpnInterface|x||||
remoteMsgVpnLocation|x|x|||
remoteMsgVpnName|x|x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnBridgeRemoteMsgVpn(params *CreateMsgVpnBridgeRemoteMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnBridgeRemoteMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnBridgeRemoteMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnBridgeRemoteMsgVpn",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnBridgeRemoteMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnBridgeRemoteMsgVpnOK), nil

}

/*
CreateMsgVpnBridgeRemoteSubscription creates a remote subscription object

Creates a Remote Subscription object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x||
bridgeVirtualRouter|x||x||
deliverAlwaysEnabled||x|||
msgVpnName|x||x||
remoteSubscriptionTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnBridgeRemoteSubscription(params *CreateMsgVpnBridgeRemoteSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnBridgeRemoteSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnBridgeRemoteSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnBridgeRemoteSubscription",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnBridgeRemoteSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnBridgeRemoteSubscriptionOK), nil

}

/*
CreateMsgVpnBridgeTLSTrustedCommonName creates a trusted common name object

Creates a Trusted Common Name object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
bridgeName|x||x||
bridgeVirtualRouter|x||x||
msgVpnName|x||x||
tlsTrustedCommonName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnBridgeTLSTrustedCommonName(params *CreateMsgVpnBridgeTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnBridgeTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnBridgeTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnBridgeTlsTrustedCommonName",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnBridgeTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnBridgeTLSTrustedCommonNameOK), nil

}

/*
CreateMsgVpnClientProfile creates a client profile object

Creates a Client Profile object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
clientProfileName|x|x|||
msgVpnName|x||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnClientProfile(params *CreateMsgVpnClientProfileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnClientProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnClientProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnClientProfile",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/clientProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnClientProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnClientProfileOK), nil

}

/*
CreateMsgVpnClientUsername creates a client username object

Creates a Client Username object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
clientUsername|x|x|||
msgVpnName|x||x||
password||||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnClientUsername(params *CreateMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnClientUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnClientUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnClientUsername",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnClientUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnClientUsernameOK), nil

}

/*
CreateMsgVpnJndiConnectionFactory creates a j n d i connection factory object

Creates a JNDI Connection Factory object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x|||
msgVpnName|x||x||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) CreateMsgVpnJndiConnectionFactory(params *CreateMsgVpnJndiConnectionFactoryParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnJndiConnectionFactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnJndiConnectionFactoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnJndiConnectionFactory",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiConnectionFactories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnJndiConnectionFactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnJndiConnectionFactoryOK), nil

}

/*
CreateMsgVpnJndiQueue creates a j n d i queue object

Creates a JNDI Queue object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
queueName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) CreateMsgVpnJndiQueue(params *CreateMsgVpnJndiQueueParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnJndiQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnJndiQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnJndiQueue",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiQueues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnJndiQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnJndiQueueOK), nil

}

/*
CreateMsgVpnJndiTopic creates a j n d i topic object

Creates a JNDI Topic object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
topicName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) CreateMsgVpnJndiTopic(params *CreateMsgVpnJndiTopicParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnJndiTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnJndiTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnJndiTopic",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiTopics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnJndiTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnJndiTopicOK), nil

}

/*
CreateMsgVpnMqttSession creates an m q t t session object

Creates an MQTT Session object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x|||
mqttSessionVirtualRouter|x|x|||
msgVpnName|x||x||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) CreateMsgVpnMqttSession(params *CreateMsgVpnMqttSessionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnMqttSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnMqttSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnMqttSession",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnMqttSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnMqttSessionOK), nil

}

/*
CreateMsgVpnMqttSessionSubscription creates an m q t t session subscription object

Creates an MQTT Session Subscription object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x||x||
mqttSessionVirtualRouter|x||x||
msgVpnName|x||x||
subscriptionTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) CreateMsgVpnMqttSessionSubscription(params *CreateMsgVpnMqttSessionSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnMqttSessionSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnMqttSessionSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnMqttSessionSubscription",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnMqttSessionSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnMqttSessionSubscriptionOK), nil

}

/*
CreateMsgVpnQueue creates a queue object

Creates a Queue object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
queueName|x|x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnQueue(params *CreateMsgVpnQueueParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnQueue",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnQueueOK), nil

}

/*
CreateMsgVpnQueueSubscription creates a queue subscription object

Creates a Queue Subscription object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
queueName|x||x||
subscriptionTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnQueueSubscription(params *CreateMsgVpnQueueSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnQueueSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnQueueSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnQueueSubscription",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnQueueSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnQueueSubscriptionOK), nil

}

/*
CreateMsgVpnReplayLog creates a replay log object

Creates a ReplayLog object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
replayLogName|x|x|||



A SEMP client authorized with a minimum access scope/level of "global/readwrite" is required to perform this operation.

This has been available since 2.10.
*/
func (a *Client) CreateMsgVpnReplayLog(params *CreateMsgVpnReplayLogParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnReplayLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnReplayLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnReplayLog",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/replayLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnReplayLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnReplayLogOK), nil

}

/*
CreateMsgVpnReplicatedTopic creates a replicated topic object

Creates a Replicated Topic object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
replicatedTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.9.
*/
func (a *Client) CreateMsgVpnReplicatedTopic(params *CreateMsgVpnReplicatedTopicParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnReplicatedTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnReplicatedTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnReplicatedTopic",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/replicatedTopics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnReplicatedTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnReplicatedTopicOK), nil

}

/*
CreateMsgVpnRestDeliveryPoint creates a r e s t delivery point object

Creates a REST Delivery Point object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
restDeliveryPointName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnRestDeliveryPoint(params *CreateMsgVpnRestDeliveryPointParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnRestDeliveryPointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnRestDeliveryPointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnRestDeliveryPoint",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnRestDeliveryPointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnRestDeliveryPointOK), nil

}

/*
CreateMsgVpnRestDeliveryPointQueueBinding creates a queue binding object

Creates a Queue Binding object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
queueBindingName|x|x|||
restDeliveryPointName|x||x||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnRestDeliveryPointQueueBinding(params *CreateMsgVpnRestDeliveryPointQueueBindingParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnRestDeliveryPointQueueBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnRestDeliveryPointQueueBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnRestDeliveryPointQueueBinding",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnRestDeliveryPointQueueBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnRestDeliveryPointQueueBindingOK), nil

}

/*
CreateMsgVpnRestDeliveryPointRestConsumer creates a r e s t consumer object

Creates a REST Consumer object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationClientCertContent||||x|
authenticationClientCertPassword||||x|
authenticationHttpBasicPassword||||x|
msgVpnName|x||x||
restConsumerName|x|x|||
restDeliveryPointName|x||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnRestDeliveryPointRestConsumer(params *CreateMsgVpnRestDeliveryPointRestConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnRestDeliveryPointRestConsumerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnRestDeliveryPointRestConsumerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnRestDeliveryPointRestConsumer",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnRestDeliveryPointRestConsumerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnRestDeliveryPointRestConsumerOK), nil

}

/*
CreateMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonName creates a trusted common name object

Creates a Trusted Common Name object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
restConsumerName|x||x||
restDeliveryPointName|x||x||
tlsTrustedCommonName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonName(params *CreateMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameOK), nil

}

/*
CreateMsgVpnTopicEndpoint creates a topic endpoint object

Creates a Topic Endpoint object. Any attribute missing from the request will be set to its default value.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x||x||
topicEndpointName|x|x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) CreateMsgVpnTopicEndpoint(params *CreateMsgVpnTopicEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMsgVpnTopicEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnTopicEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMsgVpnTopicEndpoint",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/topicEndpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnTopicEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMsgVpnTopicEndpointOK), nil

}

/*
DeleteMsgVpnACLProfile deletes an ACL profile object

Deletes an ACL Profile object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnACLProfile(params *DeleteMsgVpnACLProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnACLProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnACLProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnAclProfile",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnACLProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnACLProfileOK), nil

}

/*
DeleteMsgVpnACLProfileClientConnectException deletes a client connect exception object

Deletes a Client Connect Exception object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnACLProfileClientConnectException(params *DeleteMsgVpnACLProfileClientConnectExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnACLProfileClientConnectExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnACLProfileClientConnectExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnAclProfileClientConnectException",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnACLProfileClientConnectExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnACLProfileClientConnectExceptionOK), nil

}

/*
DeleteMsgVpnACLProfilePublishException deletes a publish topic exception object

Deletes a Publish Topic Exception object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnACLProfilePublishException(params *DeleteMsgVpnACLProfilePublishExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnACLProfilePublishExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnACLProfilePublishExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnAclProfilePublishException",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions/{topicSyntax},{publishExceptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnACLProfilePublishExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnACLProfilePublishExceptionOK), nil

}

/*
DeleteMsgVpnACLProfileSubscribeException deletes a subscribe topic exception object

Deletes a Subscribe Topic Exception object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnACLProfileSubscribeException(params *DeleteMsgVpnACLProfileSubscribeExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnACLProfileSubscribeExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnACLProfileSubscribeExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnAclProfileSubscribeException",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions/{topicSyntax},{subscribeExceptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnACLProfileSubscribeExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnACLProfileSubscribeExceptionOK), nil

}

/*
DeleteMsgVpnAuthorizationGroup deletes an l d a p authorization group object

Deletes an LDAP Authorization Group object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnAuthorizationGroup(params *DeleteMsgVpnAuthorizationGroupParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnAuthorizationGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnAuthorizationGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnAuthorizationGroup",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnAuthorizationGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnAuthorizationGroupOK), nil

}

/*
DeleteMsgVpnBridge deletes a bridge object

Deletes a Bridge object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnBridge(params *DeleteMsgVpnBridgeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnBridgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnBridgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnBridge",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnBridgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnBridgeOK), nil

}

/*
DeleteMsgVpnBridgeRemoteMsgVpn deletes a remote message v p n object

Deletes a Remote Message VPN object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnBridgeRemoteMsgVpn(params *DeleteMsgVpnBridgeRemoteMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnBridgeRemoteMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnBridgeRemoteMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnBridgeRemoteMsgVpn",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnBridgeRemoteMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnBridgeRemoteMsgVpnOK), nil

}

/*
DeleteMsgVpnBridgeRemoteSubscription deletes a remote subscription object

Deletes a Remote Subscription object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnBridgeRemoteSubscription(params *DeleteMsgVpnBridgeRemoteSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnBridgeRemoteSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnBridgeRemoteSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnBridgeRemoteSubscription",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions/{remoteSubscriptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnBridgeRemoteSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnBridgeRemoteSubscriptionOK), nil

}

/*
DeleteMsgVpnBridgeTLSTrustedCommonName deletes a trusted common name object

Deletes a Trusted Common Name object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnBridgeTLSTrustedCommonName(params *DeleteMsgVpnBridgeTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnBridgeTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnBridgeTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnBridgeTlsTrustedCommonName",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames/{tlsTrustedCommonName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnBridgeTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnBridgeTLSTrustedCommonNameOK), nil

}

/*
DeleteMsgVpnClientProfile deletes a client profile object

Deletes a Client Profile object.

A SEMP client authorized with a minimum access scope/level of "global/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnClientProfile(params *DeleteMsgVpnClientProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnClientProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnClientProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnClientProfile",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnClientProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnClientProfileOK), nil

}

/*
DeleteMsgVpnClientUsername deletes a client username object

Deletes a Client Username object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnClientUsername(params *DeleteMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnClientUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnClientUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnClientUsername",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnClientUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnClientUsernameOK), nil

}

/*
DeleteMsgVpnJndiConnectionFactory deletes a j n d i connection factory object

Deletes a JNDI Connection Factory object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) DeleteMsgVpnJndiConnectionFactory(params *DeleteMsgVpnJndiConnectionFactoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnJndiConnectionFactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnJndiConnectionFactoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnJndiConnectionFactory",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnJndiConnectionFactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnJndiConnectionFactoryOK), nil

}

/*
DeleteMsgVpnJndiQueue deletes a j n d i queue object

Deletes a JNDI Queue object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) DeleteMsgVpnJndiQueue(params *DeleteMsgVpnJndiQueueParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnJndiQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnJndiQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnJndiQueue",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiQueues/{queueName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnJndiQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnJndiQueueOK), nil

}

/*
DeleteMsgVpnJndiTopic deletes a j n d i topic object

Deletes a JNDI Topic object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) DeleteMsgVpnJndiTopic(params *DeleteMsgVpnJndiTopicParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnJndiTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnJndiTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnJndiTopic",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiTopics/{topicName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnJndiTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnJndiTopicOK), nil

}

/*
DeleteMsgVpnMqttSession deletes an m q t t session object

Deletes an MQTT Session object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) DeleteMsgVpnMqttSession(params *DeleteMsgVpnMqttSessionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnMqttSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnMqttSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnMqttSession",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnMqttSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnMqttSessionOK), nil

}

/*
DeleteMsgVpnMqttSessionSubscription deletes an m q t t session subscription object

Deletes an MQTT Session Subscription object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) DeleteMsgVpnMqttSessionSubscription(params *DeleteMsgVpnMqttSessionSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnMqttSessionSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnMqttSessionSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnMqttSessionSubscription",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnMqttSessionSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnMqttSessionSubscriptionOK), nil

}

/*
DeleteMsgVpnQueue deletes a queue object

Deletes a Queue object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnQueue(params *DeleteMsgVpnQueueParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnQueue",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/queues/{queueName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnQueueOK), nil

}

/*
DeleteMsgVpnQueueSubscription deletes a queue subscription object

Deletes a Queue Subscription object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnQueueSubscription(params *DeleteMsgVpnQueueSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnQueueSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnQueueSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnQueueSubscription",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions/{subscriptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnQueueSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnQueueSubscriptionOK), nil

}

/*
DeleteMsgVpnReplayLog deletes a replay log object

Deletes a ReplayLog object.

A SEMP client authorized with a minimum access scope/level of "global/readwrite" is required to perform this operation.

This has been available since 2.10.
*/
func (a *Client) DeleteMsgVpnReplayLog(params *DeleteMsgVpnReplayLogParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnReplayLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnReplayLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnReplayLog",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnReplayLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnReplayLogOK), nil

}

/*
DeleteMsgVpnReplicatedTopic deletes a replicated topic object

Deletes a Replicated Topic object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.9.
*/
func (a *Client) DeleteMsgVpnReplicatedTopic(params *DeleteMsgVpnReplicatedTopicParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnReplicatedTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnReplicatedTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnReplicatedTopic",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnReplicatedTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnReplicatedTopicOK), nil

}

/*
DeleteMsgVpnRestDeliveryPoint deletes a r e s t delivery point object

Deletes a REST Delivery Point object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnRestDeliveryPoint(params *DeleteMsgVpnRestDeliveryPointParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnRestDeliveryPointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnRestDeliveryPointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnRestDeliveryPoint",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnRestDeliveryPointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnRestDeliveryPointOK), nil

}

/*
DeleteMsgVpnRestDeliveryPointQueueBinding deletes a queue binding object

Deletes a Queue Binding object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnRestDeliveryPointQueueBinding(params *DeleteMsgVpnRestDeliveryPointQueueBindingParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnRestDeliveryPointQueueBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnRestDeliveryPointQueueBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnRestDeliveryPointQueueBinding",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnRestDeliveryPointQueueBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnRestDeliveryPointQueueBindingOK), nil

}

/*
DeleteMsgVpnRestDeliveryPointRestConsumer deletes a r e s t consumer object

Deletes a REST Consumer object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnRestDeliveryPointRestConsumer(params *DeleteMsgVpnRestDeliveryPointRestConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnRestDeliveryPointRestConsumerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnRestDeliveryPointRestConsumerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnRestDeliveryPointRestConsumer",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnRestDeliveryPointRestConsumerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnRestDeliveryPointRestConsumerOK), nil

}

/*
DeleteMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonName deletes a trusted common name object

Deletes a Trusted Common Name object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonName(params *DeleteMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames/{tlsTrustedCommonName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameOK), nil

}

/*
DeleteMsgVpnTopicEndpoint deletes a topic endpoint object

Deletes a Topic Endpoint object.

A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) DeleteMsgVpnTopicEndpoint(params *DeleteMsgVpnTopicEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMsgVpnTopicEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnTopicEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMsgVpnTopicEndpoint",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnTopicEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMsgVpnTopicEndpointOK), nil

}

/*
GetMsgVpnACLProfile gets an ACL profile object

Gets an ACL Profile object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
aclProfileName|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnACLProfile(params *GetMsgVpnACLProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnACLProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnACLProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAclProfile",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnACLProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnACLProfileOK), nil

}

/*
GetMsgVpnACLProfileClientConnectException gets a client connect exception object

Gets a Client Connect Exception object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
aclProfileName|x||
clientConnectExceptionAddress|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnACLProfileClientConnectException(params *GetMsgVpnACLProfileClientConnectExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnACLProfileClientConnectExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnACLProfileClientConnectExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAclProfileClientConnectException",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnACLProfileClientConnectExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnACLProfileClientConnectExceptionOK), nil

}

/*
GetMsgVpnACLProfileClientConnectExceptions gets a list of client connect exception objects

Gets a list of Client Connect Exception objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
aclProfileName|x||
clientConnectExceptionAddress|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnACLProfileClientConnectExceptions(params *GetMsgVpnACLProfileClientConnectExceptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnACLProfileClientConnectExceptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnACLProfileClientConnectExceptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAclProfileClientConnectExceptions",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnACLProfileClientConnectExceptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnACLProfileClientConnectExceptionsOK), nil

}

/*
GetMsgVpnACLProfilePublishException gets a publish topic exception object

Gets a Publish Topic Exception object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
aclProfileName|x||
msgVpnName|x||
publishExceptionTopic|x||
topicSyntax|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnACLProfilePublishException(params *GetMsgVpnACLProfilePublishExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnACLProfilePublishExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnACLProfilePublishExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAclProfilePublishException",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions/{topicSyntax},{publishExceptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnACLProfilePublishExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnACLProfilePublishExceptionOK), nil

}

/*
GetMsgVpnACLProfilePublishExceptions gets a list of publish topic exception objects

Gets a list of Publish Topic Exception objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
aclProfileName|x||
msgVpnName|x||
publishExceptionTopic|x||
topicSyntax|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnACLProfilePublishExceptions(params *GetMsgVpnACLProfilePublishExceptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnACLProfilePublishExceptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnACLProfilePublishExceptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAclProfilePublishExceptions",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnACLProfilePublishExceptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnACLProfilePublishExceptionsOK), nil

}

/*
GetMsgVpnACLProfileSubscribeException gets a subscribe topic exception object

Gets a Subscribe Topic Exception object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
aclProfileName|x||
msgVpnName|x||
subscribeExceptionTopic|x||
topicSyntax|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnACLProfileSubscribeException(params *GetMsgVpnACLProfileSubscribeExceptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnACLProfileSubscribeExceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnACLProfileSubscribeExceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAclProfileSubscribeException",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions/{topicSyntax},{subscribeExceptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnACLProfileSubscribeExceptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnACLProfileSubscribeExceptionOK), nil

}

/*
GetMsgVpnACLProfileSubscribeExceptions gets a list of subscribe topic exception objects

Gets a list of Subscribe Topic Exception objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
aclProfileName|x||
msgVpnName|x||
subscribeExceptionTopic|x||
topicSyntax|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnACLProfileSubscribeExceptions(params *GetMsgVpnACLProfileSubscribeExceptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnACLProfileSubscribeExceptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnACLProfileSubscribeExceptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAclProfileSubscribeExceptions",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnACLProfileSubscribeExceptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnACLProfileSubscribeExceptionsOK), nil

}

/*
GetMsgVpnACLProfiles gets a list of ACL profile objects

Gets a list of ACL Profile objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
aclProfileName|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnACLProfiles(params *GetMsgVpnACLProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnACLProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnACLProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAclProfiles",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnACLProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnACLProfilesOK), nil

}

/*
GetMsgVpnAuthorizationGroup gets an l d a p authorization group object

Gets an LDAP Authorization Group object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
authorizationGroupName|x||
msgVpnName|x||
orderAfterAuthorizationGroupName||x|
orderBeforeAuthorizationGroupName||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnAuthorizationGroup(params *GetMsgVpnAuthorizationGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnAuthorizationGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnAuthorizationGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAuthorizationGroup",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnAuthorizationGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnAuthorizationGroupOK), nil

}

/*
GetMsgVpnAuthorizationGroups gets a list of l d a p authorization group objects

Gets a list of LDAP Authorization Group objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
authorizationGroupName|x||
msgVpnName|x||
orderAfterAuthorizationGroupName||x|
orderBeforeAuthorizationGroupName||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnAuthorizationGroups(params *GetMsgVpnAuthorizationGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnAuthorizationGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnAuthorizationGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnAuthorizationGroups",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/authorizationGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnAuthorizationGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnAuthorizationGroupsOK), nil

}

/*
GetMsgVpnBridge gets a bridge object

Gets a Bridge object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
bridgeName|x||
bridgeVirtualRouter|x||
msgVpnName|x||
remoteAuthenticationBasicPassword||x|
remoteAuthenticationClientCertContent||x|
remoteAuthenticationClientCertPassword||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnBridge(params *GetMsgVpnBridgeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnBridgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnBridgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnBridge",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnBridgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnBridgeOK), nil

}

/*
GetMsgVpnBridgeRemoteMsgVpn gets a remote message v p n object

Gets a Remote Message VPN object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
bridgeName|x||
bridgeVirtualRouter|x||
msgVpnName|x||
password||x|
remoteMsgVpnInterface|x||
remoteMsgVpnLocation|x||
remoteMsgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnBridgeRemoteMsgVpn(params *GetMsgVpnBridgeRemoteMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnBridgeRemoteMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnBridgeRemoteMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnBridgeRemoteMsgVpn",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnBridgeRemoteMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnBridgeRemoteMsgVpnOK), nil

}

/*
GetMsgVpnBridgeRemoteMsgVpns gets a list of remote message v p n objects

Gets a list of Remote Message VPN objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
bridgeName|x||
bridgeVirtualRouter|x||
msgVpnName|x||
password||x|
remoteMsgVpnInterface|x||
remoteMsgVpnLocation|x||
remoteMsgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnBridgeRemoteMsgVpns(params *GetMsgVpnBridgeRemoteMsgVpnsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnBridgeRemoteMsgVpnsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnBridgeRemoteMsgVpnsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnBridgeRemoteMsgVpns",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnBridgeRemoteMsgVpnsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnBridgeRemoteMsgVpnsOK), nil

}

/*
GetMsgVpnBridgeRemoteSubscription gets a remote subscription object

Gets a Remote Subscription object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
bridgeName|x||
bridgeVirtualRouter|x||
msgVpnName|x||
remoteSubscriptionTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnBridgeRemoteSubscription(params *GetMsgVpnBridgeRemoteSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnBridgeRemoteSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnBridgeRemoteSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnBridgeRemoteSubscription",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions/{remoteSubscriptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnBridgeRemoteSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnBridgeRemoteSubscriptionOK), nil

}

/*
GetMsgVpnBridgeRemoteSubscriptions gets a list of remote subscription objects

Gets a list of Remote Subscription objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
bridgeName|x||
bridgeVirtualRouter|x||
msgVpnName|x||
remoteSubscriptionTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnBridgeRemoteSubscriptions(params *GetMsgVpnBridgeRemoteSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnBridgeRemoteSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnBridgeRemoteSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnBridgeRemoteSubscriptions",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnBridgeRemoteSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnBridgeRemoteSubscriptionsOK), nil

}

/*
GetMsgVpnBridgeTLSTrustedCommonName gets a trusted common name object

Gets a Trusted Common Name object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
bridgeName|x||
bridgeVirtualRouter|x||
msgVpnName|x||
tlsTrustedCommonName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnBridgeTLSTrustedCommonName(params *GetMsgVpnBridgeTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnBridgeTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnBridgeTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnBridgeTlsTrustedCommonName",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames/{tlsTrustedCommonName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnBridgeTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnBridgeTLSTrustedCommonNameOK), nil

}

/*
GetMsgVpnBridgeTLSTrustedCommonNames gets a list of trusted common name objects

Gets a list of Trusted Common Name objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
bridgeName|x||
bridgeVirtualRouter|x||
msgVpnName|x||
tlsTrustedCommonName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnBridgeTLSTrustedCommonNames(params *GetMsgVpnBridgeTLSTrustedCommonNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnBridgeTLSTrustedCommonNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnBridgeTLSTrustedCommonNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnBridgeTlsTrustedCommonNames",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnBridgeTLSTrustedCommonNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnBridgeTLSTrustedCommonNamesOK), nil

}

/*
GetMsgVpnBridges gets a list of bridge objects

Gets a list of Bridge objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
bridgeName|x||
bridgeVirtualRouter|x||
msgVpnName|x||
remoteAuthenticationBasicPassword||x|
remoteAuthenticationClientCertContent||x|
remoteAuthenticationClientCertPassword||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnBridges(params *GetMsgVpnBridgesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnBridgesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnBridgesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnBridges",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnBridgesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnBridgesOK), nil

}

/*
GetMsgVpnClientProfile gets a client profile object

Gets a Client Profile object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
clientProfileName|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnClientProfile(params *GetMsgVpnClientProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnClientProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnClientProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnClientProfile",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnClientProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnClientProfileOK), nil

}

/*
GetMsgVpnClientProfiles gets a list of client profile objects

Gets a list of Client Profile objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
clientProfileName|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnClientProfiles(params *GetMsgVpnClientProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnClientProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnClientProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnClientProfiles",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/clientProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnClientProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnClientProfilesOK), nil

}

/*
GetMsgVpnClientUsername gets a client username object

Gets a Client Username object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
clientUsername|x||
msgVpnName|x||
password||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnClientUsername(params *GetMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnClientUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnClientUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnClientUsername",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnClientUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnClientUsernameOK), nil

}

/*
GetMsgVpnClientUsernames gets a list of client username objects

Gets a list of Client Username objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
clientUsername|x||
msgVpnName|x||
password||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnClientUsernames(params *GetMsgVpnClientUsernamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnClientUsernamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnClientUsernamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnClientUsernames",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnClientUsernamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnClientUsernamesOK), nil

}

/*
GetMsgVpnJndiConnectionFactories gets a list of j n d i connection factory objects

Gets a list of JNDI Connection Factory objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
connectionFactoryName|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) GetMsgVpnJndiConnectionFactories(params *GetMsgVpnJndiConnectionFactoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnJndiConnectionFactoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnJndiConnectionFactoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnJndiConnectionFactories",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiConnectionFactories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnJndiConnectionFactoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnJndiConnectionFactoriesOK), nil

}

/*
GetMsgVpnJndiConnectionFactory gets a j n d i connection factory object

Gets a JNDI Connection Factory object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
connectionFactoryName|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) GetMsgVpnJndiConnectionFactory(params *GetMsgVpnJndiConnectionFactoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnJndiConnectionFactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnJndiConnectionFactoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnJndiConnectionFactory",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnJndiConnectionFactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnJndiConnectionFactoryOK), nil

}

/*
GetMsgVpnJndiQueue gets a j n d i queue object

Gets a JNDI Queue object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
queueName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) GetMsgVpnJndiQueue(params *GetMsgVpnJndiQueueParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnJndiQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnJndiQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnJndiQueue",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiQueues/{queueName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnJndiQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnJndiQueueOK), nil

}

/*
GetMsgVpnJndiQueues gets a list of j n d i queue objects

Gets a list of JNDI Queue objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
queueName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) GetMsgVpnJndiQueues(params *GetMsgVpnJndiQueuesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnJndiQueuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnJndiQueuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnJndiQueues",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiQueues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnJndiQueuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnJndiQueuesOK), nil

}

/*
GetMsgVpnJndiTopic gets a j n d i topic object

Gets a JNDI Topic object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
topicName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) GetMsgVpnJndiTopic(params *GetMsgVpnJndiTopicParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnJndiTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnJndiTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnJndiTopic",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiTopics/{topicName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnJndiTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnJndiTopicOK), nil

}

/*
GetMsgVpnJndiTopics gets a list of j n d i topic objects

Gets a list of JNDI Topic objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
topicName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) GetMsgVpnJndiTopics(params *GetMsgVpnJndiTopicsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnJndiTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnJndiTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnJndiTopics",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiTopics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnJndiTopicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnJndiTopicsOK), nil

}

/*
GetMsgVpnMqttSession gets an m q t t session object

Gets an MQTT Session object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
mqttSessionClientId|x||
mqttSessionVirtualRouter|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) GetMsgVpnMqttSession(params *GetMsgVpnMqttSessionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnMqttSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnMqttSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnMqttSession",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnMqttSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnMqttSessionOK), nil

}

/*
GetMsgVpnMqttSessionSubscription gets an m q t t session subscription object

Gets an MQTT Session Subscription object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
mqttSessionClientId|x||
mqttSessionVirtualRouter|x||
msgVpnName|x||
subscriptionTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) GetMsgVpnMqttSessionSubscription(params *GetMsgVpnMqttSessionSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnMqttSessionSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnMqttSessionSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnMqttSessionSubscription",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnMqttSessionSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnMqttSessionSubscriptionOK), nil

}

/*
GetMsgVpnMqttSessionSubscriptions gets a list of m q t t session subscription objects

Gets a list of MQTT Session Subscription objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
mqttSessionClientId|x||
mqttSessionVirtualRouter|x||
msgVpnName|x||
subscriptionTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) GetMsgVpnMqttSessionSubscriptions(params *GetMsgVpnMqttSessionSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnMqttSessionSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnMqttSessionSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnMqttSessionSubscriptions",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnMqttSessionSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnMqttSessionSubscriptionsOK), nil

}

/*
GetMsgVpnMqttSessions gets a list of m q t t session objects

Gets a list of MQTT Session objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
mqttSessionClientId|x||
mqttSessionVirtualRouter|x||
msgVpnName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) GetMsgVpnMqttSessions(params *GetMsgVpnMqttSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnMqttSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnMqttSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnMqttSessions",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnMqttSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnMqttSessionsOK), nil

}

/*
GetMsgVpnQueue gets a queue object

Gets a Queue object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
queueName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnQueue(params *GetMsgVpnQueueParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnQueue",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/queues/{queueName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnQueueOK), nil

}

/*
GetMsgVpnQueueSubscription gets a queue subscription object

Gets a Queue Subscription object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
queueName|x||
subscriptionTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnQueueSubscription(params *GetMsgVpnQueueSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnQueueSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnQueueSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnQueueSubscription",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions/{subscriptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnQueueSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnQueueSubscriptionOK), nil

}

/*
GetMsgVpnQueueSubscriptions gets a list of queue subscription objects

Gets a list of Queue Subscription objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
queueName|x||
subscriptionTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnQueueSubscriptions(params *GetMsgVpnQueueSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnQueueSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnQueueSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnQueueSubscriptions",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/queues/{queueName}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnQueueSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnQueueSubscriptionsOK), nil

}

/*
GetMsgVpnQueues gets a list of queue objects

Gets a list of Queue objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
queueName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnQueues(params *GetMsgVpnQueuesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnQueuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnQueuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnQueues",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnQueuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnQueuesOK), nil

}

/*
GetMsgVpnReplayLog gets a replay log object

Gets a ReplayLog object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
replayLogName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.10.
*/
func (a *Client) GetMsgVpnReplayLog(params *GetMsgVpnReplayLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnReplayLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnReplayLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnReplayLog",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnReplayLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnReplayLogOK), nil

}

/*
GetMsgVpnReplayLogs gets a list of replay log objects

Gets a list of ReplayLog objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
replayLogName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.10.
*/
func (a *Client) GetMsgVpnReplayLogs(params *GetMsgVpnReplayLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnReplayLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnReplayLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnReplayLogs",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/replayLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnReplayLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnReplayLogsOK), nil

}

/*
GetMsgVpnReplicatedTopic gets a replicated topic object

Gets a Replicated Topic object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
replicatedTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.9.
*/
func (a *Client) GetMsgVpnReplicatedTopic(params *GetMsgVpnReplicatedTopicParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnReplicatedTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnReplicatedTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnReplicatedTopic",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnReplicatedTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnReplicatedTopicOK), nil

}

/*
GetMsgVpnReplicatedTopics gets a list of replicated topic objects

Gets a list of Replicated Topic objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
replicatedTopic|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.9.
*/
func (a *Client) GetMsgVpnReplicatedTopics(params *GetMsgVpnReplicatedTopicsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnReplicatedTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnReplicatedTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnReplicatedTopics",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/replicatedTopics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnReplicatedTopicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnReplicatedTopicsOK), nil

}

/*
GetMsgVpnRestDeliveryPoint gets a r e s t delivery point object

Gets a REST Delivery Point object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
restDeliveryPointName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnRestDeliveryPoint(params *GetMsgVpnRestDeliveryPointParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnRestDeliveryPointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnRestDeliveryPointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnRestDeliveryPoint",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnRestDeliveryPointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnRestDeliveryPointOK), nil

}

/*
GetMsgVpnRestDeliveryPointQueueBinding gets a queue binding object

Gets a Queue Binding object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
queueBindingName|x||
restDeliveryPointName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnRestDeliveryPointQueueBinding(params *GetMsgVpnRestDeliveryPointQueueBindingParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnRestDeliveryPointQueueBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnRestDeliveryPointQueueBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnRestDeliveryPointQueueBinding",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnRestDeliveryPointQueueBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnRestDeliveryPointQueueBindingOK), nil

}

/*
GetMsgVpnRestDeliveryPointQueueBindings gets a list of queue binding objects

Gets a list of Queue Binding objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
queueBindingName|x||
restDeliveryPointName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnRestDeliveryPointQueueBindings(params *GetMsgVpnRestDeliveryPointQueueBindingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnRestDeliveryPointQueueBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnRestDeliveryPointQueueBindingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnRestDeliveryPointQueueBindings",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnRestDeliveryPointQueueBindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnRestDeliveryPointQueueBindingsOK), nil

}

/*
GetMsgVpnRestDeliveryPointRestConsumer gets a r e s t consumer object

Gets a REST Consumer object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
authenticationClientCertContent||x|
authenticationClientCertPassword||x|
authenticationHttpBasicPassword||x|
msgVpnName|x||
restConsumerName|x||
restDeliveryPointName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnRestDeliveryPointRestConsumer(params *GetMsgVpnRestDeliveryPointRestConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnRestDeliveryPointRestConsumerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnRestDeliveryPointRestConsumerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnRestDeliveryPointRestConsumer",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnRestDeliveryPointRestConsumerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnRestDeliveryPointRestConsumerOK), nil

}

/*
GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonName gets a trusted common name object

Gets a Trusted Common Name object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
restConsumerName|x||
restDeliveryPointName|x||
tlsTrustedCommonName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonName(params *GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames/{tlsTrustedCommonName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNameOK), nil

}

/*
GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNames gets a list of trusted common name objects

Gets a list of Trusted Common Name objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
restConsumerName|x||
restDeliveryPointName|x||
tlsTrustedCommonName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNames(params *GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNames",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnRestDeliveryPointRestConsumerTLSTrustedCommonNamesOK), nil

}

/*
GetMsgVpnRestDeliveryPointRestConsumers gets a list of r e s t consumer objects

Gets a list of REST Consumer objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
authenticationClientCertContent||x|
authenticationClientCertPassword||x|
authenticationHttpBasicPassword||x|
msgVpnName|x||
restConsumerName|x||
restDeliveryPointName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnRestDeliveryPointRestConsumers(params *GetMsgVpnRestDeliveryPointRestConsumersParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnRestDeliveryPointRestConsumersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnRestDeliveryPointRestConsumersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnRestDeliveryPointRestConsumers",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnRestDeliveryPointRestConsumersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnRestDeliveryPointRestConsumersOK), nil

}

/*
GetMsgVpnRestDeliveryPoints gets a list of r e s t delivery point objects

Gets a list of REST Delivery Point objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
restDeliveryPointName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnRestDeliveryPoints(params *GetMsgVpnRestDeliveryPointsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnRestDeliveryPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnRestDeliveryPointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnRestDeliveryPoints",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnRestDeliveryPointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnRestDeliveryPointsOK), nil

}

/*
GetMsgVpnTopicEndpoint gets a topic endpoint object

Gets a Topic Endpoint object.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
topicEndpointName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) GetMsgVpnTopicEndpoint(params *GetMsgVpnTopicEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnTopicEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnTopicEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnTopicEndpoint",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnTopicEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnTopicEndpointOK), nil

}

/*
GetMsgVpnTopicEndpoints gets a list of topic endpoint objects

Gets a list of Topic Endpoint objects.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
msgVpnName|x||
topicEndpointName|x||



A SEMP client authorized with a minimum access scope/level of "vpn/readonly" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) GetMsgVpnTopicEndpoints(params *GetMsgVpnTopicEndpointsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMsgVpnTopicEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnTopicEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMsgVpnTopicEndpoints",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/topicEndpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnTopicEndpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMsgVpnTopicEndpointsOK), nil

}

/*
ReplaceMsgVpnACLProfile replaces an ACL profile object

Replaces an ACL Profile object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x|||
msgVpnName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnACLProfile(params *ReplaceMsgVpnACLProfileParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnACLProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnACLProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnAclProfile",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnACLProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnACLProfileOK), nil

}

/*
ReplaceMsgVpnAuthorizationGroup replaces an l d a p authorization group object

Replaces an LDAP Authorization Group object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x|
authorizationGroupName|x|x|||
clientProfileName||||x|
msgVpnName|x|x|||
orderAfterAuthorizationGroupName|||x||
orderBeforeAuthorizationGroupName|||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnAuthorizationGroup(params *ReplaceMsgVpnAuthorizationGroupParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnAuthorizationGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnAuthorizationGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnAuthorizationGroup",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnAuthorizationGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnAuthorizationGroupOK), nil

}

/*
ReplaceMsgVpnBridge replaces a bridge object

Replaces a Bridge object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x|||
bridgeVirtualRouter|x|x|||
maxTtl||||x|
msgVpnName|x|x|||
remoteAuthenticationBasicClientUsername||||x|
remoteAuthenticationBasicPassword|||x|x|
remoteAuthenticationClientCertContent|||x|x|
remoteAuthenticationClientCertPassword|||x|x|
remoteAuthenticationScheme||||x|
remoteDeliverToOnePriority||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnBridge(params *ReplaceMsgVpnBridgeParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnBridgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnBridgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnBridge",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnBridgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnBridgeOK), nil

}

/*
ReplaceMsgVpnBridgeRemoteMsgVpn replaces a remote message v p n object

Replaces a Remote Message VPN object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x|||
bridgeVirtualRouter|x|x|||
clientUsername||||x|
compressedDataEnabled||||x|
egressFlowWindowSize||||x|
msgVpnName|x|x|||
password|||x|x|
remoteMsgVpnInterface|x|x|||
remoteMsgVpnLocation|x|x|||
remoteMsgVpnName|x|x|||
tlsEnabled||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnBridgeRemoteMsgVpn(params *ReplaceMsgVpnBridgeRemoteMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnBridgeRemoteMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnBridgeRemoteMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnBridgeRemoteMsgVpn",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnBridgeRemoteMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnBridgeRemoteMsgVpnOK), nil

}

/*
ReplaceMsgVpnClientProfile replaces a client profile object

Replaces a Client Profile object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
clientProfileName|x|x|||
msgVpnName|x|x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnClientProfile(params *ReplaceMsgVpnClientProfileParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnClientProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnClientProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnClientProfile",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnClientProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnClientProfileOK), nil

}

/*
ReplaceMsgVpnClientUsername replaces a client username object

Replaces a Client Username object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x|
clientProfileName||||x|
clientUsername|x|x|||
msgVpnName|x|x|||
password|||x||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnClientUsername(params *ReplaceMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnClientUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnClientUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnClientUsername",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnClientUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnClientUsernameOK), nil

}

/*
ReplaceMsgVpnJndiConnectionFactory replaces a j n d i connection factory object

Replaces a JNDI Connection Factory object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x|||
msgVpnName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) ReplaceMsgVpnJndiConnectionFactory(params *ReplaceMsgVpnJndiConnectionFactoryParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnJndiConnectionFactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnJndiConnectionFactoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnJndiConnectionFactory",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnJndiConnectionFactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnJndiConnectionFactoryOK), nil

}

/*
ReplaceMsgVpnJndiQueue replaces a j n d i queue object

Replaces a JNDI Queue object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
queueName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) ReplaceMsgVpnJndiQueue(params *ReplaceMsgVpnJndiQueueParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnJndiQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnJndiQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnJndiQueue",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiQueues/{queueName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnJndiQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnJndiQueueOK), nil

}

/*
ReplaceMsgVpnJndiTopic replaces a j n d i topic object

Replaces a JNDI Topic object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
topicName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) ReplaceMsgVpnJndiTopic(params *ReplaceMsgVpnJndiTopicParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnJndiTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnJndiTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnJndiTopic",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiTopics/{topicName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnJndiTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnJndiTopicOK), nil

}

/*
ReplaceMsgVpnMqttSession replaces an m q t t session object

Replaces an MQTT Session object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x|||
mqttSessionVirtualRouter|x|x|||
msgVpnName|x|x|||
owner||||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) ReplaceMsgVpnMqttSession(params *ReplaceMsgVpnMqttSessionParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnMqttSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnMqttSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnMqttSession",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnMqttSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnMqttSessionOK), nil

}

/*
ReplaceMsgVpnMqttSessionSubscription replaces an m q t t session subscription object

Replaces an MQTT Session Subscription object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x|||
mqttSessionVirtualRouter|x|x|||
msgVpnName|x|x|||
subscriptionTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) ReplaceMsgVpnMqttSessionSubscription(params *ReplaceMsgVpnMqttSessionSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnMqttSessionSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnMqttSessionSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnMqttSessionSubscription",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnMqttSessionSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnMqttSessionSubscriptionOK), nil

}

/*
ReplaceMsgVpnQueue replaces a queue object

Replaces a Queue object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
accessType||||x|
msgVpnName|x|x|||
owner||||x|
permission||||x|
queueName|x|x|||
respectMsgPriorityEnabled||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnQueue(params *ReplaceMsgVpnQueueParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnQueue",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/queues/{queueName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnQueueOK), nil

}

/*
ReplaceMsgVpnReplayLog replaces a replay log object

Replaces a ReplayLog object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
replayLogName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.10.
*/
func (a *Client) ReplaceMsgVpnReplayLog(params *ReplaceMsgVpnReplayLogParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnReplayLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnReplayLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnReplayLog",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnReplayLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnReplayLogOK), nil

}

/*
ReplaceMsgVpnReplicatedTopic replaces a replicated topic object

Replaces a Replicated Topic object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
replicatedTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.9.
*/
func (a *Client) ReplaceMsgVpnReplicatedTopic(params *ReplaceMsgVpnReplicatedTopicParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnReplicatedTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnReplicatedTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnReplicatedTopic",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnReplicatedTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnReplicatedTopicOK), nil

}

/*
ReplaceMsgVpnRestDeliveryPoint replaces a r e s t delivery point object

Replaces a REST Delivery Point object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
clientProfileName||||x|
msgVpnName|x|x|||
restDeliveryPointName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnRestDeliveryPoint(params *ReplaceMsgVpnRestDeliveryPointParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnRestDeliveryPointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnRestDeliveryPointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnRestDeliveryPoint",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnRestDeliveryPointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnRestDeliveryPointOK), nil

}

/*
ReplaceMsgVpnRestDeliveryPointQueueBinding replaces a queue binding object

Replaces a Queue Binding object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
queueBindingName|x|x|||
restDeliveryPointName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnRestDeliveryPointQueueBinding(params *ReplaceMsgVpnRestDeliveryPointQueueBindingParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnRestDeliveryPointQueueBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnRestDeliveryPointQueueBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnRestDeliveryPointQueueBinding",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnRestDeliveryPointQueueBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnRestDeliveryPointQueueBindingOK), nil

}

/*
ReplaceMsgVpnRestDeliveryPointRestConsumer replaces a r e s t consumer object

Replaces a REST Consumer object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationClientCertContent|||x|x|
authenticationClientCertPassword|||x|x|
authenticationHttpBasicPassword|||x|x|
authenticationHttpBasicUsername||||x|
authenticationScheme||||x|
msgVpnName|x|x|||
outgoingConnectionCount||||x|
remoteHost||||x|
remotePort||||x|
restConsumerName|x|x|||
restDeliveryPointName|x|x|||
tlsCipherSuiteList||||x|
tlsEnabled||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) ReplaceMsgVpnRestDeliveryPointRestConsumer(params *ReplaceMsgVpnRestDeliveryPointRestConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnRestDeliveryPointRestConsumerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnRestDeliveryPointRestConsumerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnRestDeliveryPointRestConsumer",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnRestDeliveryPointRestConsumerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnRestDeliveryPointRestConsumerOK), nil

}

/*
ReplaceMsgVpnTopicEndpoint replaces a topic endpoint object

Replaces a Topic Endpoint object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
accessType||||x|
msgVpnName|x|x|||
owner||||x|
permission||||x|
respectMsgPriorityEnabled||||x|
topicEndpointName|x|x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) ReplaceMsgVpnTopicEndpoint(params *ReplaceMsgVpnTopicEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceMsgVpnTopicEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceMsgVpnTopicEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceMsgVpnTopicEndpoint",
		Method:             "PUT",
		PathPattern:        "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceMsgVpnTopicEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceMsgVpnTopicEndpointOK), nil

}

/*
UpdateMsgVpnACLProfile updates an ACL profile object

Updates an ACL Profile object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName|x|x|||
msgVpnName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnACLProfile(params *UpdateMsgVpnACLProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnACLProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnACLProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnAclProfile",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnACLProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnACLProfileOK), nil

}

/*
UpdateMsgVpnAuthorizationGroup updates an l d a p authorization group object

Updates an LDAP Authorization Group object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x|
authorizationGroupName|x|x|||
clientProfileName||||x|
msgVpnName|x|x|||
orderAfterAuthorizationGroupName|||x||
orderBeforeAuthorizationGroupName|||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnAuthorizationGroup|orderAfterAuthorizationGroupName||orderBeforeAuthorizationGroupName
MsgVpnAuthorizationGroup|orderBeforeAuthorizationGroupName||orderAfterAuthorizationGroupName



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnAuthorizationGroup(params *UpdateMsgVpnAuthorizationGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnAuthorizationGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnAuthorizationGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnAuthorizationGroup",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnAuthorizationGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnAuthorizationGroupOK), nil

}

/*
UpdateMsgVpnBridge updates a bridge object

Updates a Bridge object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x|||
bridgeVirtualRouter|x|x|||
maxTtl||||x|
msgVpnName|x|x|||
remoteAuthenticationBasicClientUsername||||x|
remoteAuthenticationBasicPassword|||x|x|
remoteAuthenticationClientCertContent|||x|x|
remoteAuthenticationClientCertPassword|||x|x|
remoteAuthenticationScheme||||x|
remoteDeliverToOnePriority||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridge|remoteAuthenticationBasicClientUsername|remoteAuthenticationBasicPassword|
MsgVpnBridge|remoteAuthenticationBasicPassword|remoteAuthenticationBasicClientUsername|
MsgVpnBridge|remoteAuthenticationClientCertPassword|remoteAuthenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnBridge(params *UpdateMsgVpnBridgeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnBridgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnBridgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnBridge",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnBridgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnBridgeOK), nil

}

/*
UpdateMsgVpnBridgeRemoteMsgVpn updates a remote message v p n object

Updates a Remote Message VPN object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
bridgeName|x|x|||
bridgeVirtualRouter|x|x|||
clientUsername||||x|
compressedDataEnabled||||x|
egressFlowWindowSize||||x|
msgVpnName|x|x|||
password|||x|x|
remoteMsgVpnInterface|x|x|||
remoteMsgVpnLocation|x|x|||
remoteMsgVpnName|x|x|||
tlsEnabled||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnBridgeRemoteMsgVpn|clientUsername|password|
MsgVpnBridgeRemoteMsgVpn|password|clientUsername|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnBridgeRemoteMsgVpn(params *UpdateMsgVpnBridgeRemoteMsgVpnParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnBridgeRemoteMsgVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnBridgeRemoteMsgVpnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnBridgeRemoteMsgVpn",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnBridgeRemoteMsgVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnBridgeRemoteMsgVpnOK), nil

}

/*
UpdateMsgVpnClientProfile updates a client profile object

Updates a Client Profile object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
clientProfileName|x|x|||
msgVpnName|x|x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent
EventThresholdByPercent|clearPercent|setPercent|
EventThresholdByPercent|setPercent|clearPercent|



A SEMP client authorized with a minimum access scope/level of "global/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnClientProfile(params *UpdateMsgVpnClientProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnClientProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnClientProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnClientProfile",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnClientProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnClientProfileOK), nil

}

/*
UpdateMsgVpnClientUsername updates a client username object

Updates a Client Username object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
aclProfileName||||x|
clientProfileName||||x|
clientUsername|x|x|||
msgVpnName|x|x|||
password|||x||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnClientUsername(params *UpdateMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnClientUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnClientUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnClientUsername",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnClientUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnClientUsernameOK), nil

}

/*
UpdateMsgVpnJndiConnectionFactory updates a j n d i connection factory object

Updates a JNDI Connection Factory object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
connectionFactoryName|x|x|||
msgVpnName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) UpdateMsgVpnJndiConnectionFactory(params *UpdateMsgVpnJndiConnectionFactoryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnJndiConnectionFactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnJndiConnectionFactoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnJndiConnectionFactory",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnJndiConnectionFactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnJndiConnectionFactoryOK), nil

}

/*
UpdateMsgVpnJndiQueue updates a j n d i queue object

Updates a JNDI Queue object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
queueName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) UpdateMsgVpnJndiQueue(params *UpdateMsgVpnJndiQueueParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnJndiQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnJndiQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnJndiQueue",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiQueues/{queueName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnJndiQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnJndiQueueOK), nil

}

/*
UpdateMsgVpnJndiTopic updates a j n d i topic object

Updates a JNDI Topic object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
topicName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.2.
*/
func (a *Client) UpdateMsgVpnJndiTopic(params *UpdateMsgVpnJndiTopicParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnJndiTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnJndiTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnJndiTopic",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/jndiTopics/{topicName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnJndiTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnJndiTopicOK), nil

}

/*
UpdateMsgVpnMqttSession updates an m q t t session object

Updates an MQTT Session object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x|||
mqttSessionVirtualRouter|x|x|||
msgVpnName|x|x|||
owner||||x|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) UpdateMsgVpnMqttSession(params *UpdateMsgVpnMqttSessionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnMqttSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnMqttSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnMqttSession",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnMqttSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnMqttSessionOK), nil

}

/*
UpdateMsgVpnMqttSessionSubscription updates an m q t t session subscription object

Updates an MQTT Session Subscription object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
mqttSessionClientId|x|x|||
mqttSessionVirtualRouter|x|x|||
msgVpnName|x|x|||
subscriptionTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) UpdateMsgVpnMqttSessionSubscription(params *UpdateMsgVpnMqttSessionSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnMqttSessionSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnMqttSessionSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnMqttSessionSubscription",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnMqttSessionSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnMqttSessionSubscriptionOK), nil

}

/*
UpdateMsgVpnQueue updates a queue object

Updates a Queue object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
accessType||||x|
msgVpnName|x|x|||
owner||||x|
permission||||x|
queueName|x|x|||
respectMsgPriorityEnabled||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnQueue(params *UpdateMsgVpnQueueParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnQueue",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/queues/{queueName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnQueueOK), nil

}

/*
UpdateMsgVpnReplayLog updates a replay log object

Updates a ReplayLog object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
replayLogName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.10.
*/
func (a *Client) UpdateMsgVpnReplayLog(params *UpdateMsgVpnReplayLogParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnReplayLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnReplayLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnReplayLog",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/replayLogs/{replayLogName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnReplayLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnReplayLogOK), nil

}

/*
UpdateMsgVpnReplicatedTopic updates a replicated topic object

Updates a Replicated Topic object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
replicatedTopic|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.9.
*/
func (a *Client) UpdateMsgVpnReplicatedTopic(params *UpdateMsgVpnReplicatedTopicParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnReplicatedTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnReplicatedTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnReplicatedTopic",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnReplicatedTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnReplicatedTopicOK), nil

}

/*
UpdateMsgVpnRestDeliveryPoint updates a r e s t delivery point object

Updates a REST Delivery Point object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
clientProfileName||||x|
msgVpnName|x|x|||
restDeliveryPointName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnRestDeliveryPoint(params *UpdateMsgVpnRestDeliveryPointParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnRestDeliveryPointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnRestDeliveryPointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnRestDeliveryPoint",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnRestDeliveryPointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnRestDeliveryPointOK), nil

}

/*
UpdateMsgVpnRestDeliveryPointQueueBinding updates a queue binding object

Updates a Queue Binding object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
msgVpnName|x|x|||
queueBindingName|x|x|||
restDeliveryPointName|x|x|||



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnRestDeliveryPointQueueBinding(params *UpdateMsgVpnRestDeliveryPointQueueBindingParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnRestDeliveryPointQueueBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnRestDeliveryPointQueueBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnRestDeliveryPointQueueBinding",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnRestDeliveryPointQueueBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnRestDeliveryPointQueueBindingOK), nil

}

/*
UpdateMsgVpnRestDeliveryPointRestConsumer updates a r e s t consumer object

Updates a REST Consumer object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationClientCertContent|||x|x|
authenticationClientCertPassword|||x|x|
authenticationHttpBasicPassword|||x|x|
authenticationHttpBasicUsername||||x|
authenticationScheme||||x|
msgVpnName|x|x|||
outgoingConnectionCount||||x|
remoteHost||||x|
remotePort||||x|
restConsumerName|x|x|||
restDeliveryPointName|x|x|||
tlsCipherSuiteList||||x|
tlsEnabled||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
MsgVpnRestDeliveryPointRestConsumer|authenticationClientCertPassword|authenticationClientCertContent|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicPassword|authenticationHttpBasicUsername|
MsgVpnRestDeliveryPointRestConsumer|authenticationHttpBasicUsername|authenticationHttpBasicPassword|
MsgVpnRestDeliveryPointRestConsumer|remotePort|tlsEnabled|
MsgVpnRestDeliveryPointRestConsumer|tlsEnabled|remotePort|



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) UpdateMsgVpnRestDeliveryPointRestConsumer(params *UpdateMsgVpnRestDeliveryPointRestConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnRestDeliveryPointRestConsumerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnRestDeliveryPointRestConsumerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnRestDeliveryPointRestConsumer",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnRestDeliveryPointRestConsumerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnRestDeliveryPointRestConsumerOK), nil

}

/*
UpdateMsgVpnTopicEndpoint updates a topic endpoint object

Updates a Topic Endpoint object. Any attribute missing from the request will be left unchanged.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
accessType||||x|
msgVpnName|x|x|||
owner||||x|
permission||||x|
respectMsgPriorityEnabled||||x|
topicEndpointName|x|x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "vpn/readwrite" is required to perform this operation.

This has been available since 2.1.
*/
func (a *Client) UpdateMsgVpnTopicEndpoint(params *UpdateMsgVpnTopicEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMsgVpnTopicEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMsgVpnTopicEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMsgVpnTopicEndpoint",
		Method:             "PATCH",
		PathPattern:        "/msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMsgVpnTopicEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMsgVpnTopicEndpointOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
