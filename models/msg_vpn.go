// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpn msg vpn
// swagger:model MsgVpn
type MsgVpn struct {

	// Enable or disable Basic Authentication for clients connecting to the Message VPN. The default value is `true`.
	AuthenticationBasicEnabled *bool `json:"authenticationBasicEnabled,omitempty"`

	// The name of the RADIUS or LDAP Profile to use when "authenticationBasicType" is "radius" or "ldap" respectively. The default value is `"default"`.
	AuthenticationBasicProfileName string `json:"authenticationBasicProfileName,omitempty"`

	// The RADIUS domain string to use when "authenticationBasicType" is "radius". The default value is `""`.
	AuthenticationBasicRadiusDomain string `json:"authenticationBasicRadiusDomain,omitempty"`

	// Authentication mechanism to be used for Basic Authentication of clients connecting to the Message VPN. The default value is `"radius"`. The allowed values and their meaning are:
	//
	// <pre>
	// "internal" - Internal database. Authentication is against Client Usernames.
	// "ldap" - LDAP authentication. An LDAP profile name must be provided.
	// "radius" - RADIUS authentication. A RADIUS profile name must be provided.
	// "none" - No authentication. Anonymous login allowed.
	// </pre>
	//
	// Enum: [internal ldap radius none]
	AuthenticationBasicType string `json:"authenticationBasicType,omitempty"`

	// When enabled, if the client specifies a Client Username via the API connect method, the client provided Username is used instead of the CN (Common Name) field of the certificate"s subject. When disabled, the certificate CN is always used as the Client Username. The default value is `false`.
	AuthenticationClientCertAllowAPIProvidedUsernameEnabled bool `json:"authenticationClientCertAllowApiProvidedUsernameEnabled,omitempty"`

	// Enable or disable the Client Certificate client Authentication for the Message VPN. The default value is `false`.
	AuthenticationClientCertEnabled bool `json:"authenticationClientCertEnabled,omitempty"`

	// The maximum depth for the client certificate chain. The depth of the chain is defined as the number of signing CA certificates that are present in the chain back to the trusted self-signed root CA certificate. The default value is `3`.
	AuthenticationClientCertMaxChainDepth int64 `json:"authenticationClientCertMaxChainDepth,omitempty"`

	// Define overrides for certificate revocation checking.
	// For "allow-all" setting, the result of the client certificate revocation check is ignored. For "allow-unknown" setting, the client is authenticated even if the revocation status of his certificate cannot be determined. For "allow-valid" setting, the client is only authenticated if the revocation check returned an explicit positive response. The default value is `"allow-valid"`. The allowed values and their meaning are:
	//
	// <pre>
	// "allow-all" - Allow the client to authenticate, the result of client certificate revocation check is ingored.
	// "allow-unknown" - Allow the client to authenticate even if the revocation status of his certificate cannot be determined.
	// "allow-valid" - Allow the client to authenticate only when the revocation check returned an explicit positive response.
	// </pre>
	//  Available since 2.6.
	// Enum: [allow-all allow-unknown allow-valid]
	AuthenticationClientCertRevocationCheckMode string `json:"authenticationClientCertRevocationCheckMode,omitempty"`

	// The field from the client certificate to use as the client username. The default value is `"common-name"`. The allowed values and their meaning are:
	//
	// <pre>
	// "common-name" - the username is extracted from the certificate's Common Name.
	// "subject-alternate-name-msupn" - the username is extracted from the certificate's Other Name type of the Subject Alternative Name and must have the msUPN signature.
	// </pre>
	//  Available since 2.5.
	// Enum: [common-name subject-alternate-name-msupn]
	AuthenticationClientCertUsernameSource string `json:"authenticationClientCertUsernameSource,omitempty"`

	// Enable or disable validation of the "Not Before" and "Not After" validity dates in the client certificate. When disabled, a certificate will be accepted even if the certificate is not valid according to the "Not Before" and "Not After" validity dates in the certificate. The default value is `true`.
	AuthenticationClientCertValidateDateEnabled bool `json:"authenticationClientCertValidateDateEnabled,omitempty"`

	// When enabled, if the client specifies a Client Username via the API connect method, the client provided Username is used instead of the Kerberos Principal name in Kerberos token. When disabled, the Kerberos Principal name is always used as the Client Username. The default value is `false`.
	AuthenticationKerberosAllowAPIProvidedUsernameEnabled bool `json:"authenticationKerberosAllowApiProvidedUsernameEnabled,omitempty"`

	// Enable or disable Kerberos Authentication for clients in the Message VPN. If a user provides credentials for a different authentication scheme, this setting is not applicable. The default value is `false`.
	AuthenticationKerberosEnabled bool `json:"authenticationKerberosEnabled,omitempty"`

	// The name of the attribute that should be retrieved from the LDAP server as part of the LDAP search when authorizing a client. It indicates that the client belongs to a particular group (i.e. the value associated with this attribute). The default value is `"memberOf"`.
	AuthorizationLdapGroupMembershipAttributeName string `json:"authorizationLdapGroupMembershipAttributeName,omitempty"`

	// The LDAP Profile name to be used when "authorizationType" is "ldap". The default value is `""`.
	AuthorizationProfileName string `json:"authorizationProfileName,omitempty"`

	// Authorization mechanism to be used for clients connecting to the Message VPN. The default value is `"internal"`. The allowed values and their meaning are:
	//
	// <pre>
	// "ldap" - LDAP authorization.
	// "internal" - Internal authorization.
	// </pre>
	//
	// Enum: [ldap internal]
	AuthorizationType string `json:"authorizationType,omitempty"`

	// Enable or disable validation of the Common Name (CN) in the server certificate from the Remote Router. If enabled, the Common Name is checked against the list of Trusted Common Names configured for the Bridge. The default value is `true`.
	BridgingTLSServerCertEnforceTrustedCommonNameEnabled bool `json:"bridgingTlsServerCertEnforceTrustedCommonNameEnabled,omitempty"`

	// The maximum depth for the server certificate chain. The depth of the chain is defined as the number of signing CA certificates that are present in the chain back to the trusted self-signed root CA certificate. The default value is `3`.
	BridgingTLSServerCertMaxChainDepth int64 `json:"bridgingTlsServerCertMaxChainDepth,omitempty"`

	// Enable or disable validation of the "Not Before" and "Not After" validity dates in the server certificate. When disabled, a certificate will be accepted even if the certificate is not valid according to the "Not Before" and "Not After" validity dates in the certificate. The default value is `true`.
	BridgingTLSServerCertValidateDateEnabled bool `json:"bridgingTlsServerCertValidateDateEnabled,omitempty"`

	// Enable or disable managing of Cache Instances over the Message Bus. For a given Message VPN only one router in the network should have this attribute enabled. The default value is `true`.
	DistributedCacheManagementEnabled bool `json:"distributedCacheManagementEnabled,omitempty"`

	// Enable or disable the Message VPN. The default value is `false`.
	Enabled *bool `json:"enabled,omitempty"`

	// event connection count threshold
	EventConnectionCountThreshold *EventThreshold `json:"eventConnectionCountThreshold,omitempty"`

	// event egress flow count threshold
	EventEgressFlowCountThreshold *EventThreshold `json:"eventEgressFlowCountThreshold,omitempty"`

	// event egress msg rate threshold
	EventEgressMsgRateThreshold *EventThresholdByValue `json:"eventEgressMsgRateThreshold,omitempty"`

	// event endpoint count threshold
	EventEndpointCountThreshold *EventThreshold `json:"eventEndpointCountThreshold,omitempty"`

	// event ingress flow count threshold
	EventIngressFlowCountThreshold *EventThreshold `json:"eventIngressFlowCountThreshold,omitempty"`

	// event ingress msg rate threshold
	EventIngressMsgRateThreshold *EventThresholdByValue `json:"eventIngressMsgRateThreshold,omitempty"`

	// Size in KB for what is being considered a large message for the Message VPN. The default value is `1024`.
	EventLargeMsgThreshold int64 `json:"eventLargeMsgThreshold,omitempty"`

	// A prefix applied to all published Events in the Message VPN. The default value is `""`.
	EventLogTag string `json:"eventLogTag,omitempty"`

	// event msg spool usage threshold
	EventMsgSpoolUsageThreshold *EventThreshold `json:"eventMsgSpoolUsageThreshold,omitempty"`

	// Enable or disable Client level Event message publishing. The default value is `false`.
	EventPublishClientEnabled bool `json:"eventPublishClientEnabled,omitempty"`

	// Enable or disable Message VPN level Event message publishing. The default value is `false`.
	EventPublishMsgVpnEnabled bool `json:"eventPublishMsgVpnEnabled,omitempty"`

	// Subscription level Event message publishing mode. The default value is `"off"`. The allowed values and their meaning are:
	//
	// <pre>
	// "off" - Disable client level event message publishing.
	// "on-with-format-v1" - Enable client level event message publishing with format v1.
	// "on-with-no-unsubscribe-events-on-disconnect-format-v1" - As "on-with-format-v1", but unsubscribe events are not generated when a client disconnects. Unsubscribe events are still raised when a client explicitly unsubscribes from its subscriptions.
	// "on-with-format-v2" - Enable client level event message publishing with format v2.
	// "on-with-no-unsubscribe-events-on-disconnect-format-v2" - As "on-with-format-v2", but unsubscribe events are not generated when a client disconnects. Unsubscribe events are still raised when a client explicitly unsubscribes from its subscriptions.
	// </pre>
	//
	// Enum: [off on-with-format-v1 on-with-no-unsubscribe-events-on-disconnect-format-v1 on-with-format-v2 on-with-no-unsubscribe-events-on-disconnect-format-v2]
	EventPublishSubscriptionMode string `json:"eventPublishSubscriptionMode,omitempty"`

	// Enable or disable Event publish topics in MQTT format. The default value is `false`.
	EventPublishTopicFormatMqttEnabled bool `json:"eventPublishTopicFormatMqttEnabled,omitempty"`

	// Enable or disable Event publish topics in SMF format. The default value is `true`.
	EventPublishTopicFormatSmfEnabled bool `json:"eventPublishTopicFormatSmfEnabled,omitempty"`

	// event service amqp connection count threshold
	EventServiceAmqpConnectionCountThreshold *EventThreshold `json:"eventServiceAmqpConnectionCountThreshold,omitempty"`

	// event service mqtt connection count threshold
	EventServiceMqttConnectionCountThreshold *EventThreshold `json:"eventServiceMqttConnectionCountThreshold,omitempty"`

	// event service rest incoming connection count threshold
	EventServiceRestIncomingConnectionCountThreshold *EventThreshold `json:"eventServiceRestIncomingConnectionCountThreshold,omitempty"`

	// event service smf connection count threshold
	EventServiceSmfConnectionCountThreshold *EventThreshold `json:"eventServiceSmfConnectionCountThreshold,omitempty"`

	// event service web connection count threshold
	EventServiceWebConnectionCountThreshold *EventThreshold `json:"eventServiceWebConnectionCountThreshold,omitempty"`

	// event subscription count threshold
	EventSubscriptionCountThreshold *EventThreshold `json:"eventSubscriptionCountThreshold,omitempty"`

	// event transacted session count threshold
	EventTransactedSessionCountThreshold *EventThreshold `json:"eventTransactedSessionCountThreshold,omitempty"`

	// event transaction count threshold
	EventTransactionCountThreshold *EventThreshold `json:"eventTransactionCountThreshold,omitempty"`

	// Enable or disable the export of subscriptions in the Message VPN to other routers in the network over Neighbor links. The default value is `false`.
	ExportSubscriptionsEnabled bool `json:"exportSubscriptionsEnabled,omitempty"`

	// Enable or disable JNDI access for clients in the Message VPN. The default value is `false`. Available since 2.2.
	JndiEnabled bool `json:"jndiEnabled,omitempty"`

	// The maximum number of client connections that can be simultaneously connected to the Message VPN. This value may be higher than supported by the hardware. The default is the maximum value supported by the hardware. The default is the max value supported by the hardware.
	MaxConnectionCount *int64 `json:"maxConnectionCount,omitempty"`

	// The maximum number of egress flows that can be created in the Message VPN. The default value is `16000`.
	MaxEgressFlowCount *int64 `json:"maxEgressFlowCount,omitempty"`

	// The maximum number of Queues and Topic Endpoints that can be created in the Message VPN. The default value is `16000`.
	MaxEndpointCount *int64 `json:"maxEndpointCount,omitempty"`

	// The maximum number of ingress flows that can be created in the Message VPN. The default value is `16000`.
	MaxIngressFlowCount *int64 `json:"maxIngressFlowCount,omitempty"`

	// The maximum Message Spool usage by the Message VPN, in megabytes. The default value is `0`.
	MaxMsgSpoolUsage *int64 `json:"maxMsgSpoolUsage,omitempty"`

	// The maximum number of local client subscriptions (both primary and backup) that can be added to the Message VPN. The default varies by platform. The default varies by platform.
	MaxSubscriptionCount *int64 `json:"maxSubscriptionCount,omitempty"`

	// The maximum number of transacted sessions for the Message VPN. The default varies by platform. The default varies by platform.
	MaxTransactedSessionCount *int64 `json:"maxTransactedSessionCount,omitempty"`

	// The maximum number of transactions for the Message VPN. The default varies by platform. The default varies by platform.
	MaxTransactionCount *int64 `json:"maxTransactionCount,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The acknowledgement (ACK) propagation interval for the Replication Bridge, in number of replicated messages. The default value is `20`.
	ReplicationAckPropagationIntervalMsgCount int64 `json:"replicationAckPropagationIntervalMsgCount,omitempty"`

	// The Client Username the Replication Bridge uses to login to the Remote Message VPN on the Replication mate. The default value is `""`.
	ReplicationBridgeAuthenticationBasicClientUsername string `json:"replicationBridgeAuthenticationBasicClientUsername,omitempty"`

	// The password the Replication Bridge uses to login to the Remote Message VPN on the Replication mate. The default is to have no password. The default is to have no `replicationBridgeAuthenticationBasicPassword`.
	ReplicationBridgeAuthenticationBasicPassword string `json:"replicationBridgeAuthenticationBasicPassword,omitempty"`

	// The PEM formatted content for the client certificate used by this bridge to login to the Remote Message VPN. It must consist of a private key and between one and three certificates comprising the certificate trust chain. The default value is `""`. Available since 2.9.
	ReplicationBridgeAuthenticationClientCertContent string `json:"replicationBridgeAuthenticationClientCertContent,omitempty"`

	// The password for the client certificate used by this bridge to login to the Remote Message VPN. The default value is `""`. Available since 2.9.
	ReplicationBridgeAuthenticationClientCertPassword string `json:"replicationBridgeAuthenticationClientCertPassword,omitempty"`

	// The Authentication Scheme for the Replication Bridge in the Message VPN. The default value is `"basic"`. The allowed values and their meaning are:
	//
	// <pre>
	// "basic" - Basic Authentication Scheme (via username and password).
	// "client-certificate" - Client Certificate Authentication Scheme (via certificate-file).
	// </pre>
	//
	// Enum: [basic client-certificate]
	ReplicationBridgeAuthenticationScheme string `json:"replicationBridgeAuthenticationScheme,omitempty"`

	// Whether compression is used for the Replication Bridge. The default value is `false`.
	ReplicationBridgeCompressedDataEnabled bool `json:"replicationBridgeCompressedDataEnabled,omitempty"`

	// The size of the window used for guaranteed messages published to the Replication Bridge, in messages. The default value is `255`.
	ReplicationBridgeEgressFlowWindowSize int64 `json:"replicationBridgeEgressFlowWindowSize,omitempty"`

	// Number of seconds that must pass before retrying the Replication Bridge connection. The default value is `3`.
	ReplicationBridgeRetryDelay int64 `json:"replicationBridgeRetryDelay,omitempty"`

	// Enable or disable use of TLS for the Replication Bridge connection. The default value is `false`.
	ReplicationBridgeTLSEnabled bool `json:"replicationBridgeTlsEnabled,omitempty"`

	// The Client Profile for the Unidirectional Replication Bridge. The Client Profile must exist in the local Message VPN, and it is used only for the TCP parameters. The default value is `"#client-profile"`.
	ReplicationBridgeUnidirectionalClientProfileName string `json:"replicationBridgeUnidirectionalClientProfileName,omitempty"`

	// Enable or disable the Replication feature for the Message VPN. The default value is `false`.
	ReplicationEnabled *bool `json:"replicationEnabled,omitempty"`

	// The behavior to take when enabling the Replication feature for the Message VPN, depending on the existence of the Replication Queue. The default value is `"fail-on-existing-queue"`. The allowed values and their meaning are:
	//
	// <pre>
	// "fail-on-existing-queue" - The data replication queue must not already exist.
	// "force-use-existing-queue" - The data replication queue must already exist. Any data messages on the Queue will be forwarded to interested applications. IMPORTANT: Before using this mode be certain that the messages are not stale or otherwise unsuitable to be forwarded. This mode can only be specified when the existing queue is configured the same as is currently specified under replication configuration otherwise the enabling of replication will fail.
	// "force-recreate-queue" - The data replication queue must already exist. Any data messages on the Queue will be discarded. IMPORTANT: Before using this mode be certain that the messages on the existing data replication queue are not needed by interested applications.
	// </pre>
	//
	// Enum: [fail-on-existing-queue force-use-existing-queue force-recreate-queue]
	ReplicationEnabledQueueBehavior string `json:"replicationEnabledQueueBehavior,omitempty"`

	// The maximum Message Spool usage by the Replication Bridge Queue (quota), in megabytes. The default value is `60000`.
	ReplicationQueueMaxMsgSpoolUsage int64 `json:"replicationQueueMaxMsgSpoolUsage,omitempty"`

	// Assign the message discard behavior, that is the circumstances under which a negative acknowledgement (NACK) is sent to the Client on the Replication Bridge Queue discards. The default value is `true`.
	ReplicationQueueRejectMsgToSenderOnDiscardEnabled bool `json:"replicationQueueRejectMsgToSenderOnDiscardEnabled,omitempty"`

	// Enable or disable the synchronously replicated topics ineligible behavior of the Replication Bridge. If enabled and the synchronous replication becomes ineligible, guaranteed messages published to synchronously replicated topics will be rejected back to the sender as a negative acknowledgement (NACK). If disabled, the synchronous replication will revert to the asynchronous one. The default value is `false`.
	ReplicationRejectMsgWhenSyncIneligibleEnabled bool `json:"replicationRejectMsgWhenSyncIneligibleEnabled,omitempty"`

	// The replication role for the Message VPN. The default value is `"standby"`. The allowed values and their meaning are:
	//
	// <pre>
	// "active" - Assume the Active role in Replication for the Message VPN.
	// "standby" - Assume the Standby role in Replication for the Message VPN.
	// </pre>
	//
	// Enum: [active standby]
	ReplicationRole string `json:"replicationRole,omitempty"`

	// The transaction replication mode for all transactions within the Message VPN. When mode is asynchronous, all transactions originated by clients are replicated to the standby site using the asynchronous replication. When mode is synchronous, all transactions originated by clients are replicated to the standby site using the synchronous replication. Changing this value during operation will not affect existing transactions, it is only used upon starting a transaction. The default value is `"async"`. The allowed values and their meaning are:
	//
	// <pre>
	// "sync" - Synchronous replication-mode. Published messages are acknowledged when they are spooled on the standby site.
	// "async" - Asynchronous replication-mode. Published messages are acknowledged when they are spooled locally.
	// </pre>
	//
	// Enum: [sync async]
	ReplicationTransactionMode string `json:"replicationTransactionMode,omitempty"`

	// Enable or disable validation of the Common Name (CN) in the server certificate from the remote REST Consumer. If enabled, the Common Name is checked against the list of Trusted Common Names configured for the REST Consumer. The default value is `true`.
	RestTLSServerCertEnforceTrustedCommonNameEnabled bool `json:"restTlsServerCertEnforceTrustedCommonNameEnabled,omitempty"`

	// The maximum depth for the server certificate from the remote REST Consumer chain. The depth of the chain is defined as the number of signing CA certificates that are present in the chain back to the trusted self-signed root CA certificate. The default value is `3`.
	RestTLSServerCertMaxChainDepth int64 `json:"restTlsServerCertMaxChainDepth,omitempty"`

	// Enable or disable validation of the "Not Before" and "Not After" validity dates in the server certificate from the remote REST Consumer. When disabled, a certificate will be accepted even if the certificate is not valid according to the "Not Before" and "Not After" validity dates in the certificate. The default value is `true`.
	RestTLSServerCertValidateDateEnabled bool `json:"restTlsServerCertValidateDateEnabled,omitempty"`

	// Enable or disable "admin client" SEMP over Message Bus for the current Message VPN. This applies only to SEMPv1. The default value is `false`.
	SempOverMsgBusAdminClientEnabled bool `json:"sempOverMsgBusAdminClientEnabled,omitempty"`

	// Enable or disable "admin distributed-cache" SEMP over Message Bus for the current Message VPN. This applies only to SEMPv1. The default value is `false`.
	SempOverMsgBusAdminDistributedCacheEnabled bool `json:"sempOverMsgBusAdminDistributedCacheEnabled,omitempty"`

	// Enable or disable "admin" SEMP over Message Bus for the current Message VPN. This applies only to SEMPv1. The default value is `false`.
	SempOverMsgBusAdminEnabled bool `json:"sempOverMsgBusAdminEnabled,omitempty"`

	// Enable or disable SEMP over Message Bus for the current Message VPN. This applies only to SEMPv1. The default value is `true`.
	SempOverMsgBusEnabled bool `json:"sempOverMsgBusEnabled,omitempty"`

	// Enable or disable "show" SEMP over Message Bus for the current Message VPN. This applies only to SEMPv1. The default value is `false`.
	SempOverMsgBusShowEnabled bool `json:"sempOverMsgBusShowEnabled,omitempty"`

	// The maximum number of AMQP client connections that can be simultaneously connected to the Message VPN. The default is the max value supported by the hardware. Available since 2.2.
	ServiceAmqpMaxConnectionCount int64 `json:"serviceAmqpMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text AMQP service in the Message VPN. Disabling causes clients connected to the corresponding listen-port to be disconnected. The default value is `false`. Available since 2.2.
	ServiceAmqpPlainTextEnabled bool `json:"serviceAmqpPlainTextEnabled,omitempty"`

	// The port number for plain-text AMQP clients that connect to the Message VPN. The default is to have no `serviceAmqpPlainTextListenPort`. Available since 2.2.
	ServiceAmqpPlainTextListenPort int64 `json:"serviceAmqpPlainTextListenPort,omitempty"`

	// Enable or disable the use of TLS for the AMQP service in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `false`. Available since 2.2.
	ServiceAmqpTLSEnabled bool `json:"serviceAmqpTlsEnabled,omitempty"`

	// The port number for AMQP clients that connect to the Message VPN over TLS. The default is to have no `serviceAmqpTlsListenPort`. Available since 2.2.
	ServiceAmqpTLSListenPort int64 `json:"serviceAmqpTlsListenPort,omitempty"`

	// The maximum number of MQTT client connections that can be simultaneously connected to the Message VPN. The default is the max value supported by the hardware. Available since 2.1.
	ServiceMqttMaxConnectionCount int64 `json:"serviceMqttMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text MQTT service in the Message VPN. Disabling causes clients currently connected to be disconnected. The default value is `false`. Available since 2.1.
	ServiceMqttPlainTextEnabled bool `json:"serviceMqttPlainTextEnabled,omitempty"`

	// The port number for plain-text MQTT clients that connect to the Message VPN. The default value is `0`. Available since 2.1.
	ServiceMqttPlainTextListenPort int64 `json:"serviceMqttPlainTextListenPort,omitempty"`

	// Enable or disable the use of TLS for the MQTT service in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `false`. Available since 2.1.
	ServiceMqttTLSEnabled bool `json:"serviceMqttTlsEnabled,omitempty"`

	// The port number for MQTT clients that connect to the Message VPN over TLS. The default value is `0`. Available since 2.1.
	ServiceMqttTLSListenPort int64 `json:"serviceMqttTlsListenPort,omitempty"`

	// Enable or disable the use of WebSocket over TLS for the MQTT service in the Message VPN. Disabling causes clients currently connected by WebSocket over TLS to be disconnected. The default value is `false`. Available since 2.1.
	ServiceMqttTLSWebSocketEnabled bool `json:"serviceMqttTlsWebSocketEnabled,omitempty"`

	// The port number for MQTT clients that connect to the Message VPN using WebSocket over TLS. The default value is `0`. Available since 2.1.
	ServiceMqttTLSWebSocketListenPort int64 `json:"serviceMqttTlsWebSocketListenPort,omitempty"`

	// Enable or disable the use of WebSocket for the MQTT service in the Message VPN. Disabling causes clients currently connected by WebSocket to be disconnected. The default value is `false`. Available since 2.1.
	ServiceMqttWebSocketEnabled bool `json:"serviceMqttWebSocketEnabled,omitempty"`

	// The port number for plain-text MQTT clients that connect to the Message VPN using WebSocket. The default value is `0`. Available since 2.1.
	ServiceMqttWebSocketListenPort int64 `json:"serviceMqttWebSocketListenPort,omitempty"`

	// The maximum number of REST incoming client connections that can be simultaneously connected to the Message VPN. The default is the max value supported by the hardware.
	ServiceRestIncomingMaxConnectionCount int64 `json:"serviceRestIncomingMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text REST service for incoming clients in the Message VPN. Disabling causes clients currently connected to be disconnected. The default value is `false`.
	ServiceRestIncomingPlainTextEnabled bool `json:"serviceRestIncomingPlainTextEnabled,omitempty"`

	// The port number for incoming plain-text REST clients that connect to the Message VPN. The default value is `0`.
	ServiceRestIncomingPlainTextListenPort int64 `json:"serviceRestIncomingPlainTextListenPort,omitempty"`

	// Enable or disable the use of TLS for the REST service for incoming clients in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `false`.
	ServiceRestIncomingTLSEnabled bool `json:"serviceRestIncomingTlsEnabled,omitempty"`

	// The port number for incoming REST clients that connect to the Message VPN over TLS. The default value is `0`.
	ServiceRestIncomingTLSListenPort int64 `json:"serviceRestIncomingTlsListenPort,omitempty"`

	// The REST service mode for incoming REST clients that connect to the Message VPN. The default value is `"messaging"`. The allowed values and their meaning are:
	//
	// <pre>
	// "gateway" - Act as a message gateway through which REST messages are propagated.
	// "messaging" - Act as a message router on which REST messages are queued.
	// </pre>
	//  Available since 2.6.
	// Enum: [gateway messaging]
	ServiceRestMode string `json:"serviceRestMode,omitempty"`

	// The maximum number of REST Consumer (outgoing) client connections that can be simultaneously connected to the Message VPN. The default varies by platform.
	ServiceRestOutgoingMaxConnectionCount int64 `json:"serviceRestOutgoingMaxConnectionCount,omitempty"`

	// The maximum number of SMF client connections that can be simultaneously connected to the Message VPN. The default is the max value supported by the hardware.
	ServiceSmfMaxConnectionCount int64 `json:"serviceSmfMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text SMF service in the Message VPN. Disabling causes clients currently connected to be disconnected. The default value is `true`.
	ServiceSmfPlainTextEnabled bool `json:"serviceSmfPlainTextEnabled,omitempty"`

	// Enable or disable the use of TLS for the SMF service in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `true`.
	ServiceSmfTLSEnabled bool `json:"serviceSmfTlsEnabled,omitempty"`

	// The maximum number of Web Transport client connections that can be simultaneously connected to the Message VPN. The default is the max value supported by the hardware.
	ServiceWebMaxConnectionCount int64 `json:"serviceWebMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text Web Transport service in the Message VPN. Disabling causes clients currently connected to be disconnected. The default value is `true`.
	ServiceWebPlainTextEnabled bool `json:"serviceWebPlainTextEnabled,omitempty"`

	// Enable or disable the use of TLS for the Web Transport service in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `true`.
	ServiceWebTLSEnabled bool `json:"serviceWebTlsEnabled,omitempty"`

	// Enable or disable the allowing of TLS SMF clients to downgrade their connections to plain-text connections. Changing this will not affect existing connections. The default value is `false`.
	TLSAllowDowngradeToPlainTextEnabled bool `json:"tlsAllowDowngradeToPlainTextEnabled,omitempty"`
}

// Validate validates this msg vpn
func (m *MsgVpn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationBasicType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationClientCertRevocationCheckMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationClientCertUsernameSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventEgressFlowCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventEgressMsgRateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventEndpointCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventIngressFlowCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventIngressMsgRateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventMsgSpoolUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventPublishSubscriptionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceAmqpConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceMqttConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceRestIncomingConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceSmfConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceWebConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventSubscriptionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTransactedSessionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTransactionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationBridgeAuthenticationScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationEnabledQueueBehavior(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTransactionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRestMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnTypeAuthenticationBasicTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["internal","ldap","radius","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeAuthenticationBasicTypePropEnum = append(msgVpnTypeAuthenticationBasicTypePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationBasicTypeInternal captures enum value "internal"
	MsgVpnAuthenticationBasicTypeInternal string = "internal"

	// MsgVpnAuthenticationBasicTypeLdap captures enum value "ldap"
	MsgVpnAuthenticationBasicTypeLdap string = "ldap"

	// MsgVpnAuthenticationBasicTypeRadius captures enum value "radius"
	MsgVpnAuthenticationBasicTypeRadius string = "radius"

	// MsgVpnAuthenticationBasicTypeNone captures enum value "none"
	MsgVpnAuthenticationBasicTypeNone string = "none"
)

// prop value enum
func (m *MsgVpn) validateAuthenticationBasicTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeAuthenticationBasicTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateAuthenticationBasicType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationBasicType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationBasicTypeEnum("authenticationBasicType", "body", m.AuthenticationBasicType); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeAuthenticationClientCertRevocationCheckModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow-all","allow-unknown","allow-valid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeAuthenticationClientCertRevocationCheckModePropEnum = append(msgVpnTypeAuthenticationClientCertRevocationCheckModePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationClientCertRevocationCheckModeAllowAll captures enum value "allow-all"
	MsgVpnAuthenticationClientCertRevocationCheckModeAllowAll string = "allow-all"

	// MsgVpnAuthenticationClientCertRevocationCheckModeAllowUnknown captures enum value "allow-unknown"
	MsgVpnAuthenticationClientCertRevocationCheckModeAllowUnknown string = "allow-unknown"

	// MsgVpnAuthenticationClientCertRevocationCheckModeAllowValid captures enum value "allow-valid"
	MsgVpnAuthenticationClientCertRevocationCheckModeAllowValid string = "allow-valid"
)

// prop value enum
func (m *MsgVpn) validateAuthenticationClientCertRevocationCheckModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeAuthenticationClientCertRevocationCheckModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateAuthenticationClientCertRevocationCheckMode(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationClientCertRevocationCheckMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationClientCertRevocationCheckModeEnum("authenticationClientCertRevocationCheckMode", "body", m.AuthenticationClientCertRevocationCheckMode); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeAuthenticationClientCertUsernameSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["common-name","subject-alternate-name-msupn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeAuthenticationClientCertUsernameSourcePropEnum = append(msgVpnTypeAuthenticationClientCertUsernameSourcePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationClientCertUsernameSourceCommonName captures enum value "common-name"
	MsgVpnAuthenticationClientCertUsernameSourceCommonName string = "common-name"

	// MsgVpnAuthenticationClientCertUsernameSourceSubjectAlternateNameMsupn captures enum value "subject-alternate-name-msupn"
	MsgVpnAuthenticationClientCertUsernameSourceSubjectAlternateNameMsupn string = "subject-alternate-name-msupn"
)

// prop value enum
func (m *MsgVpn) validateAuthenticationClientCertUsernameSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeAuthenticationClientCertUsernameSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateAuthenticationClientCertUsernameSource(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationClientCertUsernameSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationClientCertUsernameSourceEnum("authenticationClientCertUsernameSource", "body", m.AuthenticationClientCertUsernameSource); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeAuthorizationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ldap","internal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeAuthorizationTypePropEnum = append(msgVpnTypeAuthorizationTypePropEnum, v)
	}
}

const (

	// MsgVpnAuthorizationTypeLdap captures enum value "ldap"
	MsgVpnAuthorizationTypeLdap string = "ldap"

	// MsgVpnAuthorizationTypeInternal captures enum value "internal"
	MsgVpnAuthorizationTypeInternal string = "internal"
)

// prop value enum
func (m *MsgVpn) validateAuthorizationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeAuthorizationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateAuthorizationType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthorizationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationTypeEnum("authorizationType", "body", m.AuthorizationType); err != nil {
		return err
	}

	return nil
}

func (m *MsgVpn) validateEventConnectionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventConnectionCountThreshold != nil {
		if err := m.EventConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventEgressFlowCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventEgressFlowCountThreshold) { // not required
		return nil
	}

	if m.EventEgressFlowCountThreshold != nil {
		if err := m.EventEgressFlowCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEgressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventEgressMsgRateThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventEgressMsgRateThreshold) { // not required
		return nil
	}

	if m.EventEgressMsgRateThreshold != nil {
		if err := m.EventEgressMsgRateThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEgressMsgRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventEndpointCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventEndpointCountThreshold) { // not required
		return nil
	}

	if m.EventEndpointCountThreshold != nil {
		if err := m.EventEndpointCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEndpointCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventIngressFlowCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventIngressFlowCountThreshold) { // not required
		return nil
	}

	if m.EventIngressFlowCountThreshold != nil {
		if err := m.EventIngressFlowCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventIngressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventIngressMsgRateThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventIngressMsgRateThreshold) { // not required
		return nil
	}

	if m.EventIngressMsgRateThreshold != nil {
		if err := m.EventIngressMsgRateThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventIngressMsgRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventMsgSpoolUsageThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventMsgSpoolUsageThreshold) { // not required
		return nil
	}

	if m.EventMsgSpoolUsageThreshold != nil {
		if err := m.EventMsgSpoolUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventMsgSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

var msgVpnTypeEventPublishSubscriptionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["off","on-with-format-v1","on-with-no-unsubscribe-events-on-disconnect-format-v1","on-with-format-v2","on-with-no-unsubscribe-events-on-disconnect-format-v2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeEventPublishSubscriptionModePropEnum = append(msgVpnTypeEventPublishSubscriptionModePropEnum, v)
	}
}

const (

	// MsgVpnEventPublishSubscriptionModeOff captures enum value "off"
	MsgVpnEventPublishSubscriptionModeOff string = "off"

	// MsgVpnEventPublishSubscriptionModeOnWithFormatV1 captures enum value "on-with-format-v1"
	MsgVpnEventPublishSubscriptionModeOnWithFormatV1 string = "on-with-format-v1"

	// MsgVpnEventPublishSubscriptionModeOnWithNoUnsubscribeEventsOnDisconnectFormatV1 captures enum value "on-with-no-unsubscribe-events-on-disconnect-format-v1"
	MsgVpnEventPublishSubscriptionModeOnWithNoUnsubscribeEventsOnDisconnectFormatV1 string = "on-with-no-unsubscribe-events-on-disconnect-format-v1"

	// MsgVpnEventPublishSubscriptionModeOnWithFormatV2 captures enum value "on-with-format-v2"
	MsgVpnEventPublishSubscriptionModeOnWithFormatV2 string = "on-with-format-v2"

	// MsgVpnEventPublishSubscriptionModeOnWithNoUnsubscribeEventsOnDisconnectFormatV2 captures enum value "on-with-no-unsubscribe-events-on-disconnect-format-v2"
	MsgVpnEventPublishSubscriptionModeOnWithNoUnsubscribeEventsOnDisconnectFormatV2 string = "on-with-no-unsubscribe-events-on-disconnect-format-v2"
)

// prop value enum
func (m *MsgVpn) validateEventPublishSubscriptionModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeEventPublishSubscriptionModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateEventPublishSubscriptionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.EventPublishSubscriptionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventPublishSubscriptionModeEnum("eventPublishSubscriptionMode", "body", m.EventPublishSubscriptionMode); err != nil {
		return err
	}

	return nil
}

func (m *MsgVpn) validateEventServiceAmqpConnectionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventServiceAmqpConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceAmqpConnectionCountThreshold != nil {
		if err := m.EventServiceAmqpConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceAmqpConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventServiceMqttConnectionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventServiceMqttConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceMqttConnectionCountThreshold != nil {
		if err := m.EventServiceMqttConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceMqttConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventServiceRestIncomingConnectionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventServiceRestIncomingConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceRestIncomingConnectionCountThreshold != nil {
		if err := m.EventServiceRestIncomingConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceRestIncomingConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventServiceSmfConnectionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventServiceSmfConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceSmfConnectionCountThreshold != nil {
		if err := m.EventServiceSmfConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceSmfConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventServiceWebConnectionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventServiceWebConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceWebConnectionCountThreshold != nil {
		if err := m.EventServiceWebConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceWebConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventSubscriptionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventSubscriptionCountThreshold) { // not required
		return nil
	}

	if m.EventSubscriptionCountThreshold != nil {
		if err := m.EventSubscriptionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventSubscriptionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventTransactedSessionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTransactedSessionCountThreshold) { // not required
		return nil
	}

	if m.EventTransactedSessionCountThreshold != nil {
		if err := m.EventTransactedSessionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTransactedSessionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventTransactionCountThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTransactionCountThreshold) { // not required
		return nil
	}

	if m.EventTransactionCountThreshold != nil {
		if err := m.EventTransactionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTransactionCountThreshold")
			}
			return err
		}
	}

	return nil
}

var msgVpnTypeReplicationBridgeAuthenticationSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","client-certificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeReplicationBridgeAuthenticationSchemePropEnum = append(msgVpnTypeReplicationBridgeAuthenticationSchemePropEnum, v)
	}
}

const (

	// MsgVpnReplicationBridgeAuthenticationSchemeBasic captures enum value "basic"
	MsgVpnReplicationBridgeAuthenticationSchemeBasic string = "basic"

	// MsgVpnReplicationBridgeAuthenticationSchemeClientCertificate captures enum value "client-certificate"
	MsgVpnReplicationBridgeAuthenticationSchemeClientCertificate string = "client-certificate"
)

// prop value enum
func (m *MsgVpn) validateReplicationBridgeAuthenticationSchemeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeReplicationBridgeAuthenticationSchemePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateReplicationBridgeAuthenticationScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationBridgeAuthenticationScheme) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationBridgeAuthenticationSchemeEnum("replicationBridgeAuthenticationScheme", "body", m.ReplicationBridgeAuthenticationScheme); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeReplicationEnabledQueueBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fail-on-existing-queue","force-use-existing-queue","force-recreate-queue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeReplicationEnabledQueueBehaviorPropEnum = append(msgVpnTypeReplicationEnabledQueueBehaviorPropEnum, v)
	}
}

const (

	// MsgVpnReplicationEnabledQueueBehaviorFailOnExistingQueue captures enum value "fail-on-existing-queue"
	MsgVpnReplicationEnabledQueueBehaviorFailOnExistingQueue string = "fail-on-existing-queue"

	// MsgVpnReplicationEnabledQueueBehaviorForceUseExistingQueue captures enum value "force-use-existing-queue"
	MsgVpnReplicationEnabledQueueBehaviorForceUseExistingQueue string = "force-use-existing-queue"

	// MsgVpnReplicationEnabledQueueBehaviorForceRecreateQueue captures enum value "force-recreate-queue"
	MsgVpnReplicationEnabledQueueBehaviorForceRecreateQueue string = "force-recreate-queue"
)

// prop value enum
func (m *MsgVpn) validateReplicationEnabledQueueBehaviorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeReplicationEnabledQueueBehaviorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateReplicationEnabledQueueBehavior(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationEnabledQueueBehavior) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationEnabledQueueBehaviorEnum("replicationEnabledQueueBehavior", "body", m.ReplicationEnabledQueueBehavior); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeReplicationRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","standby"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeReplicationRolePropEnum = append(msgVpnTypeReplicationRolePropEnum, v)
	}
}

const (

	// MsgVpnReplicationRoleActive captures enum value "active"
	MsgVpnReplicationRoleActive string = "active"

	// MsgVpnReplicationRoleStandby captures enum value "standby"
	MsgVpnReplicationRoleStandby string = "standby"
)

// prop value enum
func (m *MsgVpn) validateReplicationRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeReplicationRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateReplicationRole(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationRole) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationRoleEnum("replicationRole", "body", m.ReplicationRole); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeReplicationTransactionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sync","async"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeReplicationTransactionModePropEnum = append(msgVpnTypeReplicationTransactionModePropEnum, v)
	}
}

const (

	// MsgVpnReplicationTransactionModeSync captures enum value "sync"
	MsgVpnReplicationTransactionModeSync string = "sync"

	// MsgVpnReplicationTransactionModeAsync captures enum value "async"
	MsgVpnReplicationTransactionModeAsync string = "async"
)

// prop value enum
func (m *MsgVpn) validateReplicationTransactionModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeReplicationTransactionModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateReplicationTransactionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationTransactionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationTransactionModeEnum("replicationTransactionMode", "body", m.ReplicationTransactionMode); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeServiceRestModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["gateway","messaging"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeServiceRestModePropEnum = append(msgVpnTypeServiceRestModePropEnum, v)
	}
}

const (

	// MsgVpnServiceRestModeGateway captures enum value "gateway"
	MsgVpnServiceRestModeGateway string = "gateway"

	// MsgVpnServiceRestModeMessaging captures enum value "messaging"
	MsgVpnServiceRestModeMessaging string = "messaging"
)

// prop value enum
func (m *MsgVpn) validateServiceRestModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnTypeServiceRestModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateServiceRestMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceRestMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceRestModeEnum("serviceRestMode", "body", m.ServiceRestMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpn) UnmarshalBinary(b []byte) error {
	var res MsgVpn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
