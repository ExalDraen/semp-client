// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DmrClusterLink dmr cluster link
// swagger:model DmrClusterLink
type DmrClusterLink struct {

	// The password used to authenticate with the remote node when using basic internal authentication. If this per-Link password is not configured, the Cluster's password is used instead. The default is to have no `authenticationBasicPassword`.
	AuthenticationBasicPassword string `json:"authenticationBasicPassword,omitempty"`

	// The authentication scheme to be used by the Link which initiates connections to the remote node. The default value is `"basic"`. The allowed values and their meaning are:
	//
	// <pre>
	// "basic" - Basic Authentication Scheme (via username and password).
	// "client-certificate" - Client Certificate Authentication Scheme (via certificate file or content).
	// </pre>
	//
	// Enum: [basic client-certificate]
	AuthenticationScheme string `json:"authenticationScheme,omitempty"`

	// The maximum depth of the "Control 1" (C-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	ClientProfileQueueControl1MaxDepth int32 `json:"clientProfileQueueControl1MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Control 1" (C-1) priority queue, regardless of the `clientProfileQueueControl1MaxDepth` value. The default value is `4`.
	ClientProfileQueueControl1MinMsgBurst int32 `json:"clientProfileQueueControl1MinMsgBurst,omitempty"`

	// The maximum depth of the "Direct 1" (D-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	ClientProfileQueueDirect1MaxDepth int32 `json:"clientProfileQueueDirect1MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Direct 1" (D-1) priority queue, regardless of the `clientProfileQueueDirect1MaxDepth` value. The default value is `4`.
	ClientProfileQueueDirect1MinMsgBurst int32 `json:"clientProfileQueueDirect1MinMsgBurst,omitempty"`

	// The maximum depth of the "Direct 2" (D-2) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	ClientProfileQueueDirect2MaxDepth int32 `json:"clientProfileQueueDirect2MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Direct 2" (D-2) priority queue, regardless of the `clientProfileQueueDirect2MaxDepth` value. The default value is `4`.
	ClientProfileQueueDirect2MinMsgBurst int32 `json:"clientProfileQueueDirect2MinMsgBurst,omitempty"`

	// The maximum depth of the "Direct 3" (D-3) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	ClientProfileQueueDirect3MaxDepth int32 `json:"clientProfileQueueDirect3MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Direct 3" (D-3) priority queue, regardless of the `clientProfileQueueDirect3MaxDepth` value. The default value is `4`.
	ClientProfileQueueDirect3MinMsgBurst int32 `json:"clientProfileQueueDirect3MinMsgBurst,omitempty"`

	// The maximum depth of the "Guaranteed 1" (G-1) priority queue, in work units. Each work unit is 2048 bytes of message data. The default value is `20000`.
	ClientProfileQueueGuaranteed1MaxDepth int32 `json:"clientProfileQueueGuaranteed1MaxDepth,omitempty"`

	// The number of messages that are always allowed entry into the "Guaranteed 1" (G-3) priority queue, regardless of the `clientProfileQueueGuaranteed1MaxDepth` value. The default value is `255`.
	ClientProfileQueueGuaranteed1MinMsgBurst int32 `json:"clientProfileQueueGuaranteed1MinMsgBurst,omitempty"`

	// The TCP initial congestion window size, in multiples of the TCP Maximum Segment Size (MSS). Changing the value from its default of 2 results in non-compliance with RFC 2581. Contact Solace Support before changing this value. The default value is `2`.
	ClientProfileTCPCongestionWindowSize int64 `json:"clientProfileTcpCongestionWindowSize,omitempty"`

	// The number of TCP keepalive retransmissions to be carried out before declaring that the remote end is not available. The default value is `5`.
	ClientProfileTCPKeepaliveCount int64 `json:"clientProfileTcpKeepaliveCount,omitempty"`

	// The amount of time a connection must remain idle before TCP begins sending keepalive probes, in seconds. The default value is `3`.
	ClientProfileTCPKeepaliveIDLETime int64 `json:"clientProfileTcpKeepaliveIdleTime,omitempty"`

	// The amount of time between TCP keepalive retransmissions when no acknowledgement is received, in seconds. The default value is `1`.
	ClientProfileTCPKeepaliveInterval int64 `json:"clientProfileTcpKeepaliveInterval,omitempty"`

	// The TCP maximum segment size, in kilobytes. Changes are applied to all existing connections. The default value is `1460`.
	ClientProfileTCPMaxSegmentSize int64 `json:"clientProfileTcpMaxSegmentSize,omitempty"`

	// The TCP maximum window size, in kilobytes. Changes are applied to all existing connections. The default value is `256`.
	ClientProfileTCPMaxWindowSize int64 `json:"clientProfileTcpMaxWindowSize,omitempty"`

	// The name of the Cluster.
	DmrClusterName string `json:"dmrClusterName,omitempty"`

	// The number of outstanding guaranteed messages that can be sent over the Link before acknowledgement is received by the sender. The default value is `255`.
	EgressFlowWindowSize int64 `json:"egressFlowWindowSize,omitempty"`

	// Enable or disable the Link. When disabled, subscription sets of this and the remote node are not kept up-to-date, and messages are not exchanged with the remote node. Published guaranteed messages will be queued up for future delivery based on current subscription sets. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// The initiator of the Link's TCP connections. The default value is `"lexical"`. The allowed values and their meaning are:
	//
	// <pre>
	// "lexical" - The "higher" node-name initiates.
	// "local" - The local node initiates.
	// "remote" - The remote node initiates.
	// </pre>
	//
	// Enum: [lexical local remote]
	Initiator string `json:"initiator,omitempty"`

	// The name of the Dead Message Queue (DMQ) used by the Queue for discarded messages. The default value is `"#DEAD_MSG_QUEUE"`.
	QueueDeadMsgQueue string `json:"queueDeadMsgQueue,omitempty"`

	// queue event spool usage threshold
	QueueEventSpoolUsageThreshold *EventThreshold `json:"queueEventSpoolUsageThreshold,omitempty"`

	// The maximum number of messages delivered but not acknowledged per flow for the Queue. The default is the max value supported by the platform.
	QueueMaxDeliveredUnackedMsgsPerFlow int64 `json:"queueMaxDeliveredUnackedMsgsPerFlow,omitempty"`

	// The maximum message spool usage by the Queue (quota), in megabytes (MB). The default varies by platform.
	QueueMaxMsgSpoolUsage int64 `json:"queueMaxMsgSpoolUsage,omitempty"`

	// The maximum number of times the Queue will attempt redelivery of a message prior to it being discarded or moved to the DMQ. A value of 0 means to retry forever. The default value is `0`.
	QueueMaxRedeliveryCount int64 `json:"queueMaxRedeliveryCount,omitempty"`

	// The maximum time in seconds a message can stay in the Queue when `queueRespectTtlEnabled` is `true`. A message expires when the lesser of the sender assigned time-to-live (TTL) in the message and the `queueMaxTtl` configured for the Queue, is exceeded. A value of 0 disables expiry. The default value is `0`.
	QueueMaxTTL int64 `json:"queueMaxTtl,omitempty"`

	// Determines when to return negative acknowledgements (NACKs) to sending clients on message discards. Note that NACKs cause the message to not be delivered to any destination and Transacted Session commits to fail. The default value is `"always"`. The allowed values and their meaning are:
	//
	// <pre>
	// "always" - Always return a negative acknowledgment (NACK) to the sending client on message discard.
	// "when-queue-enabled" - Only return a negative acknowledgment (NACK) to the sending client on message discard when the Queue is enabled.
	// "never" - Never return a negative acknowledgment (NACK) to the sending client on message discard.
	// </pre>
	//
	// Enum: [always when-queue-enabled never]
	QueueRejectMsgToSenderOnDiscardBehavior string `json:"queueRejectMsgToSenderOnDiscardBehavior,omitempty"`

	// Enable or disable the respecting of the time-to-live (TTL) for messages in the Queue. When enabled, expired messages are discarded or moved to the DMQ. The default value is `false`.
	QueueRespectTTLEnabled bool `json:"queueRespectTtlEnabled,omitempty"`

	// The name of the node at the remote end of the Link.
	RemoteNodeName string `json:"remoteNodeName,omitempty"`

	// The span of the Link, either internal or external. Internal Links connect nodes within the same Cluster. External Links connect nodes within different Clusters. The default value is `"external"`. The allowed values and their meaning are:
	//
	// <pre>
	// "internal" - Link to same cluster.
	// "external" - Link to other cluster.
	// </pre>
	//
	// Enum: [internal external]
	Span string `json:"span,omitempty"`

	// Enable or disable compression on the Link. The default value is `false`.
	TransportCompressedEnabled bool `json:"transportCompressedEnabled,omitempty"`

	// Enable or disable encryption on the Link. The default value is `false`.
	TransportTLSEnabled bool `json:"transportTlsEnabled,omitempty"`
}

// Validate validates this dmr cluster link
func (m *DmrClusterLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueEventSpoolUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueRejectMsgToSenderOnDiscardBehavior(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dmrClusterLinkTypeAuthenticationSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","client-certificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dmrClusterLinkTypeAuthenticationSchemePropEnum = append(dmrClusterLinkTypeAuthenticationSchemePropEnum, v)
	}
}

const (

	// DmrClusterLinkAuthenticationSchemeBasic captures enum value "basic"
	DmrClusterLinkAuthenticationSchemeBasic string = "basic"

	// DmrClusterLinkAuthenticationSchemeClientCertificate captures enum value "client-certificate"
	DmrClusterLinkAuthenticationSchemeClientCertificate string = "client-certificate"
)

// prop value enum
func (m *DmrClusterLink) validateAuthenticationSchemeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dmrClusterLinkTypeAuthenticationSchemePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DmrClusterLink) validateAuthenticationScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationScheme) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationSchemeEnum("authenticationScheme", "body", m.AuthenticationScheme); err != nil {
		return err
	}

	return nil
}

var dmrClusterLinkTypeInitiatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["lexical","local","remote"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dmrClusterLinkTypeInitiatorPropEnum = append(dmrClusterLinkTypeInitiatorPropEnum, v)
	}
}

const (

	// DmrClusterLinkInitiatorLexical captures enum value "lexical"
	DmrClusterLinkInitiatorLexical string = "lexical"

	// DmrClusterLinkInitiatorLocal captures enum value "local"
	DmrClusterLinkInitiatorLocal string = "local"

	// DmrClusterLinkInitiatorRemote captures enum value "remote"
	DmrClusterLinkInitiatorRemote string = "remote"
)

// prop value enum
func (m *DmrClusterLink) validateInitiatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dmrClusterLinkTypeInitiatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DmrClusterLink) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	// value enum
	if err := m.validateInitiatorEnum("initiator", "body", m.Initiator); err != nil {
		return err
	}

	return nil
}

func (m *DmrClusterLink) validateQueueEventSpoolUsageThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueEventSpoolUsageThreshold) { // not required
		return nil
	}

	if m.QueueEventSpoolUsageThreshold != nil {
		if err := m.QueueEventSpoolUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueEventSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

var dmrClusterLinkTypeQueueRejectMsgToSenderOnDiscardBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","when-queue-enabled","never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dmrClusterLinkTypeQueueRejectMsgToSenderOnDiscardBehaviorPropEnum = append(dmrClusterLinkTypeQueueRejectMsgToSenderOnDiscardBehaviorPropEnum, v)
	}
}

const (

	// DmrClusterLinkQueueRejectMsgToSenderOnDiscardBehaviorAlways captures enum value "always"
	DmrClusterLinkQueueRejectMsgToSenderOnDiscardBehaviorAlways string = "always"

	// DmrClusterLinkQueueRejectMsgToSenderOnDiscardBehaviorWhenQueueEnabled captures enum value "when-queue-enabled"
	DmrClusterLinkQueueRejectMsgToSenderOnDiscardBehaviorWhenQueueEnabled string = "when-queue-enabled"

	// DmrClusterLinkQueueRejectMsgToSenderOnDiscardBehaviorNever captures enum value "never"
	DmrClusterLinkQueueRejectMsgToSenderOnDiscardBehaviorNever string = "never"
)

// prop value enum
func (m *DmrClusterLink) validateQueueRejectMsgToSenderOnDiscardBehaviorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dmrClusterLinkTypeQueueRejectMsgToSenderOnDiscardBehaviorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DmrClusterLink) validateQueueRejectMsgToSenderOnDiscardBehavior(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueRejectMsgToSenderOnDiscardBehavior) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueueRejectMsgToSenderOnDiscardBehaviorEnum("queueRejectMsgToSenderOnDiscardBehavior", "body", m.QueueRejectMsgToSenderOnDiscardBehavior); err != nil {
		return err
	}

	return nil
}

var dmrClusterLinkTypeSpanPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["internal","external"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dmrClusterLinkTypeSpanPropEnum = append(dmrClusterLinkTypeSpanPropEnum, v)
	}
}

const (

	// DmrClusterLinkSpanInternal captures enum value "internal"
	DmrClusterLinkSpanInternal string = "internal"

	// DmrClusterLinkSpanExternal captures enum value "external"
	DmrClusterLinkSpanExternal string = "external"
)

// prop value enum
func (m *DmrClusterLink) validateSpanEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dmrClusterLinkTypeSpanPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DmrClusterLink) validateSpan(formats strfmt.Registry) error {

	if swag.IsZero(m.Span) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpanEnum("span", "body", m.Span); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DmrClusterLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DmrClusterLink) UnmarshalBinary(b []byte) error {
	var res DmrClusterLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
