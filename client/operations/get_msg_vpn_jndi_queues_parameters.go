// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMsgVpnJndiQueuesParams creates a new GetMsgVpnJndiQueuesParams object
// with the default values initialized.
func NewGetMsgVpnJndiQueuesParams() *GetMsgVpnJndiQueuesParams {
	var (
		countDefault = int64(10)
	)
	return &GetMsgVpnJndiQueuesParams{
		Count: &countDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMsgVpnJndiQueuesParamsWithTimeout creates a new GetMsgVpnJndiQueuesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMsgVpnJndiQueuesParamsWithTimeout(timeout time.Duration) *GetMsgVpnJndiQueuesParams {
	var (
		countDefault = int64(10)
	)
	return &GetMsgVpnJndiQueuesParams{
		Count: &countDefault,

		timeout: timeout,
	}
}

// NewGetMsgVpnJndiQueuesParamsWithContext creates a new GetMsgVpnJndiQueuesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMsgVpnJndiQueuesParamsWithContext(ctx context.Context) *GetMsgVpnJndiQueuesParams {
	var (
		countDefault = int64(10)
	)
	return &GetMsgVpnJndiQueuesParams{
		Count: &countDefault,

		Context: ctx,
	}
}

// NewGetMsgVpnJndiQueuesParamsWithHTTPClient creates a new GetMsgVpnJndiQueuesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMsgVpnJndiQueuesParamsWithHTTPClient(client *http.Client) *GetMsgVpnJndiQueuesParams {
	var (
		countDefault = int64(10)
	)
	return &GetMsgVpnJndiQueuesParams{
		Count:      &countDefault,
		HTTPClient: client,
	}
}

/*GetMsgVpnJndiQueuesParams contains all the parameters to send to the API endpoint
for the get msg vpn jndi queues operation typically these are written to a http.Request
*/
type GetMsgVpnJndiQueuesParams struct {

	/*Count
	  Limit the count of objects in the response. See the documentation for the `count` parameter.

	*/
	Count *int64
	/*Cursor
	  The cursor, or position, for the next page of objects. See the documentation for the `cursor` parameter.

	*/
	Cursor *string
	/*MsgVpnName
	  The name of the Message VPN.

	*/
	MsgVpnName string
	/*Select
	  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the `select` parameter.

	*/
	Select []string
	/*Where
	  Include in the response only objects where certain conditions are true. See the the documentation for the `where` parameter.

	*/
	Where []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) WithTimeout(timeout time.Duration) *GetMsgVpnJndiQueuesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) WithContext(ctx context.Context) *GetMsgVpnJndiQueuesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) WithHTTPClient(client *http.Client) *GetMsgVpnJndiQueuesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) WithCount(count *int64) *GetMsgVpnJndiQueuesParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) SetCount(count *int64) {
	o.Count = count
}

// WithCursor adds the cursor to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) WithCursor(cursor *string) *GetMsgVpnJndiQueuesParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithMsgVpnName adds the msgVpnName to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) WithMsgVpnName(msgVpnName string) *GetMsgVpnJndiQueuesParams {
	o.SetMsgVpnName(msgVpnName)
	return o
}

// SetMsgVpnName adds the msgVpnName to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) SetMsgVpnName(msgVpnName string) {
	o.MsgVpnName = msgVpnName
}

// WithSelect adds the selectVar to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) WithSelect(selectVar []string) *GetMsgVpnJndiQueuesParams {
	o.SetSelect(selectVar)
	return o
}

// SetSelect adds the select to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) SetSelect(selectVar []string) {
	o.Select = selectVar
}

// WithWhere adds the where to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) WithWhere(where []string) *GetMsgVpnJndiQueuesParams {
	o.SetWhere(where)
	return o
}

// SetWhere adds the where to the get msg vpn jndi queues params
func (o *GetMsgVpnJndiQueuesParams) SetWhere(where []string) {
	o.Where = where
}

// WriteToRequest writes these params to a swagger request
func (o *GetMsgVpnJndiQueuesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	// path param msgVpnName
	if err := r.SetPathParam("msgVpnName", o.MsgVpnName); err != nil {
		return err
	}

	valuesSelect := o.Select

	joinedSelect := swag.JoinByFormat(valuesSelect, "csv")
	// query array param select
	if err := r.SetQueryParam("select", joinedSelect...); err != nil {
		return err
	}

	valuesWhere := o.Where

	joinedWhere := swag.JoinByFormat(valuesWhere, "csv")
	// query array param where
	if err := r.SetQueryParam("where", joinedWhere...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
