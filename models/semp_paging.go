// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SempPaging semp paging
// swagger:model SempPaging
type SempPaging struct {

	// The cursor, or position, for the next page of objects. Use this as the `cursor` query parameter of the next request.
	// Required: true
	CursorQuery *string `json:"cursorQuery"`

	// The URI of the next page of objects. `cursorQuery` is already embedded within this URI.
	// Required: true
	NextPageURI *string `json:"nextPageUri"`
}

// Validate validates this semp paging
func (m *SempPaging) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCursorQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextPageURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SempPaging) validateCursorQuery(formats strfmt.Registry) error {

	if err := validate.Required("cursorQuery", "body", m.CursorQuery); err != nil {
		return err
	}

	return nil
}

func (m *SempPaging) validateNextPageURI(formats strfmt.Registry) error {

	if err := validate.Required("nextPageUri", "body", m.NextPageURI); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SempPaging) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SempPaging) UnmarshalBinary(b []byte) error {
	var res SempPaging
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
