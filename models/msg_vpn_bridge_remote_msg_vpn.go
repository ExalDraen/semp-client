// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnBridgeRemoteMsgVpn msg vpn bridge remote msg vpn
// swagger:model MsgVpnBridgeRemoteMsgVpn
type MsgVpnBridgeRemoteMsgVpn struct {

	// The name of the Bridge.
	BridgeName string `json:"bridgeName,omitempty"`

	// Specify whether the Bridge is configured for the primary or backup Virtual Router or auto configured. The allowed values and their meaning are:
	//
	// <pre>
	// "primary" - The Bridge is used for the primary Virtual Router.
	// "backup" - The Bridge is used for the backup Virtual Router.
	// "auto" - The Bridge is automatically assigned a Router.
	// </pre>
	//
	// Enum: [primary backup auto]
	BridgeVirtualRouter string `json:"bridgeVirtualRouter,omitempty"`

	// The Client Username the Bridge uses to login to the Remote Message VPN. This per Remote Message VPN value overrides the value provided for the bridge overall. The default value is `""`.
	ClientUsername string `json:"clientUsername,omitempty"`

	// Enable or disable data compression for the Remote Message VPN. The default value is `false`.
	CompressedDataEnabled bool `json:"compressedDataEnabled,omitempty"`

	// The order in which attempts to connect to different Message VPN hosts are attempted, or the preference given to incoming connections from remote routers, from 1 (highest priority) to 4 (lowest priority). The default value is `4`.
	ConnectOrder int32 `json:"connectOrder,omitempty"`

	// Indicates how many outstanding guaranteed messages can be sent over the Remote Message VPN connection before acknowledgement is received by the sender. The default value is `255`.
	EgressFlowWindowSize int64 `json:"egressFlowWindowSize,omitempty"`

	// Enable or disable the Remote Message VPN. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The password for the Client Username that the Bridge uses to login to the Remote Message VPN. The default is to have no `password`.
	Password string `json:"password,omitempty"`

	// The queue binding of the Bridge for the Remote Message VPN. The Bridge attempts to bind to that queue over the Bridge link once the link has been established, or immediately if it already is established. The queue must be configured on the remote router when the Bridge connection is established. If the bind fails an event log is generated which includes the reason for the failure. The default value is `""`.
	QueueBinding string `json:"queueBinding,omitempty"`

	// The interface on the local router through which to access the Remote Message VPN. If not provided (recommended) then an interface will be chosen automatically based on routing tables. If an interface is provided, `remoteMsgVpnLocation` must be either a hostname or IP Address, not a virtual router-name.
	RemoteMsgVpnInterface string `json:"remoteMsgVpnInterface,omitempty"`

	// The location of the Remote Message VPN. This may be given as either an FQDN (resolvable via DNS), IP Address, or virtual router-name (starts with 'v:'). If specified as a FQDN or IP Address, a port must be specified as well.
	RemoteMsgVpnLocation string `json:"remoteMsgVpnLocation,omitempty"`

	// The name of the Remote Message VPN.
	RemoteMsgVpnName string `json:"remoteMsgVpnName,omitempty"`

	// Enable or disable TLS for the Remote Message VPN. The default value is `false`.
	TLSEnabled bool `json:"tlsEnabled,omitempty"`

	// The Client Profile for the unidirectional Bridge for the Remote Message VPN. The Client Profile must exist in the local Message VPN, and it is used only for the TCP parameters. The default value is `"#client-profile"`.
	UnidirectionalClientProfile string `json:"unidirectionalClientProfile,omitempty"`
}

// Validate validates this msg vpn bridge remote msg vpn
func (m *MsgVpnBridgeRemoteMsgVpn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBridgeVirtualRouter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnBridgeRemoteMsgVpnTypeBridgeVirtualRouterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","backup","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnBridgeRemoteMsgVpnTypeBridgeVirtualRouterPropEnum = append(msgVpnBridgeRemoteMsgVpnTypeBridgeVirtualRouterPropEnum, v)
	}
}

const (

	// MsgVpnBridgeRemoteMsgVpnBridgeVirtualRouterPrimary captures enum value "primary"
	MsgVpnBridgeRemoteMsgVpnBridgeVirtualRouterPrimary string = "primary"

	// MsgVpnBridgeRemoteMsgVpnBridgeVirtualRouterBackup captures enum value "backup"
	MsgVpnBridgeRemoteMsgVpnBridgeVirtualRouterBackup string = "backup"

	// MsgVpnBridgeRemoteMsgVpnBridgeVirtualRouterAuto captures enum value "auto"
	MsgVpnBridgeRemoteMsgVpnBridgeVirtualRouterAuto string = "auto"
)

// prop value enum
func (m *MsgVpnBridgeRemoteMsgVpn) validateBridgeVirtualRouterEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, msgVpnBridgeRemoteMsgVpnTypeBridgeVirtualRouterPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnBridgeRemoteMsgVpn) validateBridgeVirtualRouter(formats strfmt.Registry) error {

	if swag.IsZero(m.BridgeVirtualRouter) { // not required
		return nil
	}

	// value enum
	if err := m.validateBridgeVirtualRouterEnum("bridgeVirtualRouter", "body", m.BridgeVirtualRouter); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnBridgeRemoteMsgVpn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnBridgeRemoteMsgVpn) UnmarshalBinary(b []byte) error {
	var res MsgVpnBridgeRemoteMsgVpn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
