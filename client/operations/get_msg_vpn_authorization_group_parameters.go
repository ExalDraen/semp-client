// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMsgVpnAuthorizationGroupParams creates a new GetMsgVpnAuthorizationGroupParams object
// with the default values initialized.
func NewGetMsgVpnAuthorizationGroupParams() *GetMsgVpnAuthorizationGroupParams {
	var ()
	return &GetMsgVpnAuthorizationGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMsgVpnAuthorizationGroupParamsWithTimeout creates a new GetMsgVpnAuthorizationGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMsgVpnAuthorizationGroupParamsWithTimeout(timeout time.Duration) *GetMsgVpnAuthorizationGroupParams {
	var ()
	return &GetMsgVpnAuthorizationGroupParams{

		timeout: timeout,
	}
}

// NewGetMsgVpnAuthorizationGroupParamsWithContext creates a new GetMsgVpnAuthorizationGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMsgVpnAuthorizationGroupParamsWithContext(ctx context.Context) *GetMsgVpnAuthorizationGroupParams {
	var ()
	return &GetMsgVpnAuthorizationGroupParams{

		Context: ctx,
	}
}

// NewGetMsgVpnAuthorizationGroupParamsWithHTTPClient creates a new GetMsgVpnAuthorizationGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMsgVpnAuthorizationGroupParamsWithHTTPClient(client *http.Client) *GetMsgVpnAuthorizationGroupParams {
	var ()
	return &GetMsgVpnAuthorizationGroupParams{
		HTTPClient: client,
	}
}

/*GetMsgVpnAuthorizationGroupParams contains all the parameters to send to the API endpoint
for the get msg vpn authorization group operation typically these are written to a http.Request
*/
type GetMsgVpnAuthorizationGroupParams struct {

	/*AuthorizationGroupName
	  The authorizationGroupName of the LDAP Authorization Group.

	*/
	AuthorizationGroupName string
	/*MsgVpnName
	  The msgVpnName of the Message VPN.

	*/
	MsgVpnName string
	/*Select
	  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See [Select](#select "Description of the syntax of the `select` parameter").

	*/
	Select []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) WithTimeout(timeout time.Duration) *GetMsgVpnAuthorizationGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) WithContext(ctx context.Context) *GetMsgVpnAuthorizationGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) WithHTTPClient(client *http.Client) *GetMsgVpnAuthorizationGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorizationGroupName adds the authorizationGroupName to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) WithAuthorizationGroupName(authorizationGroupName string) *GetMsgVpnAuthorizationGroupParams {
	o.SetAuthorizationGroupName(authorizationGroupName)
	return o
}

// SetAuthorizationGroupName adds the authorizationGroupName to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) SetAuthorizationGroupName(authorizationGroupName string) {
	o.AuthorizationGroupName = authorizationGroupName
}

// WithMsgVpnName adds the msgVpnName to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) WithMsgVpnName(msgVpnName string) *GetMsgVpnAuthorizationGroupParams {
	o.SetMsgVpnName(msgVpnName)
	return o
}

// SetMsgVpnName adds the msgVpnName to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) SetMsgVpnName(msgVpnName string) {
	o.MsgVpnName = msgVpnName
}

// WithSelect adds the selectVar to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) WithSelect(selectVar []string) *GetMsgVpnAuthorizationGroupParams {
	o.SetSelect(selectVar)
	return o
}

// SetSelect adds the select to the get msg vpn authorization group params
func (o *GetMsgVpnAuthorizationGroupParams) SetSelect(selectVar []string) {
	o.Select = selectVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetMsgVpnAuthorizationGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param authorizationGroupName
	if err := r.SetPathParam("authorizationGroupName", o.AuthorizationGroupName); err != nil {
		return err
	}

	// path param msgVpnName
	if err := r.SetPathParam("msgVpnName", o.MsgVpnName); err != nil {
		return err
	}

	valuesSelect := o.Select

	joinedSelect := swag.JoinByFormat(valuesSelect, "csv")
	// query array param select
	if err := r.SetQueryParam("select", joinedSelect...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
