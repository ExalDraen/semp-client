// Code generated by go-swagger; DO NOT EDIT.

package dmr_cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dmr cluster API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dmr cluster API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDmrCluster creates a cluster object

Create a Cluster object. Any attribute missing from the request will be set to its default value.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword||||x|
authenticationClientCertContent||||x|
authenticationClientCertPassword||||x|
dmrClusterName|x|x|||
nodeName|||x||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
DmrCluster|authenticationClientCertPassword|authenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) CreateDmrCluster(params *CreateDmrClusterParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDmrClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDmrClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDmrCluster",
		Method:             "POST",
		PathPattern:        "/dmrClusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDmrClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDmrClusterOK), nil

}

/*
CreateDmrClusterLink creates a link object

Create a Link object. Any attribute missing from the request will be set to its default value.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword||||x|
dmrClusterName|x||x||
remoteNodeName|x|x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) CreateDmrClusterLink(params *CreateDmrClusterLinkParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDmrClusterLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDmrClusterLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDmrClusterLink",
		Method:             "POST",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDmrClusterLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDmrClusterLinkOK), nil

}

/*
CreateDmrClusterLinkRemoteAddress creates a remote address object

Create a Remote Address object. Any attribute missing from the request will be set to its default value.

Each Remote Address, consisting of a FQDN or IP address and optional port, is used to connect to the remote node for this Link. Up to 4 addresses may be provided for each Link, and will be tried on a round-robin basis.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
dmrClusterName|x||x||
remoteAddress|x|x|||
remoteNodeName|x||x||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) CreateDmrClusterLinkRemoteAddress(params *CreateDmrClusterLinkRemoteAddressParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDmrClusterLinkRemoteAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDmrClusterLinkRemoteAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDmrClusterLinkRemoteAddress",
		Method:             "POST",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDmrClusterLinkRemoteAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDmrClusterLinkRemoteAddressOK), nil

}

/*
CreateDmrClusterLinkTLSTrustedCommonName creates a trusted common name object

Create a Trusted Common Name object. Any attribute missing from the request will be set to its default value.

The Trusted Common Names for the Link are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
dmrClusterName|x||x||
remoteNodeName|x||x||
tlsTrustedCommonName|x|x|||



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) CreateDmrClusterLinkTLSTrustedCommonName(params *CreateDmrClusterLinkTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDmrClusterLinkTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDmrClusterLinkTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDmrClusterLinkTlsTrustedCommonName",
		Method:             "POST",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDmrClusterLinkTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDmrClusterLinkTLSTrustedCommonNameOK), nil

}

/*
DeleteDmrCluster deletes a cluster object

Delete a Cluster object.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) DeleteDmrCluster(params *DeleteDmrClusterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDmrClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDmrClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDmrCluster",
		Method:             "DELETE",
		PathPattern:        "/dmrClusters/{dmrClusterName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDmrClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDmrClusterOK), nil

}

/*
DeleteDmrClusterLink deletes a link object

Delete a Link object.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) DeleteDmrClusterLink(params *DeleteDmrClusterLinkParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDmrClusterLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDmrClusterLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDmrClusterLink",
		Method:             "DELETE",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDmrClusterLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDmrClusterLinkOK), nil

}

/*
DeleteDmrClusterLinkRemoteAddress deletes a remote address object

Delete a Remote Address object.

Each Remote Address, consisting of a FQDN or IP address and optional port, is used to connect to the remote node for this Link. Up to 4 addresses may be provided for each Link, and will be tried on a round-robin basis.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) DeleteDmrClusterLinkRemoteAddress(params *DeleteDmrClusterLinkRemoteAddressParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDmrClusterLinkRemoteAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDmrClusterLinkRemoteAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDmrClusterLinkRemoteAddress",
		Method:             "DELETE",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses/{remoteAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDmrClusterLinkRemoteAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDmrClusterLinkRemoteAddressOK), nil

}

/*
DeleteDmrClusterLinkTLSTrustedCommonName deletes a trusted common name object

Delete a Trusted Common Name object.

The Trusted Common Names for the Link are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.

A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) DeleteDmrClusterLinkTLSTrustedCommonName(params *DeleteDmrClusterLinkTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDmrClusterLinkTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDmrClusterLinkTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDmrClusterLinkTlsTrustedCommonName",
		Method:             "DELETE",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames/{tlsTrustedCommonName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDmrClusterLinkTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDmrClusterLinkTLSTrustedCommonNameOK), nil

}

/*
GetDmrCluster gets a cluster object

Get a Cluster object.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
authenticationBasicPassword||x|
authenticationClientCertContent||x|
authenticationClientCertPassword||x|
dmrClusterName|x||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) GetDmrCluster(params *GetDmrClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetDmrClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDmrClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDmrCluster",
		Method:             "GET",
		PathPattern:        "/dmrClusters/{dmrClusterName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDmrClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDmrClusterOK), nil

}

/*
GetDmrClusterLink gets a link object

Get a Link object.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
authenticationBasicPassword||x|
dmrClusterName|x||
remoteNodeName|x||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) GetDmrClusterLink(params *GetDmrClusterLinkParams, authInfo runtime.ClientAuthInfoWriter) (*GetDmrClusterLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDmrClusterLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDmrClusterLink",
		Method:             "GET",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDmrClusterLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDmrClusterLinkOK), nil

}

/*
GetDmrClusterLinkRemoteAddress gets a remote address object

Get a Remote Address object.

Each Remote Address, consisting of a FQDN or IP address and optional port, is used to connect to the remote node for this Link. Up to 4 addresses may be provided for each Link, and will be tried on a round-robin basis.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
dmrClusterName|x||
remoteAddress|x||
remoteNodeName|x||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) GetDmrClusterLinkRemoteAddress(params *GetDmrClusterLinkRemoteAddressParams, authInfo runtime.ClientAuthInfoWriter) (*GetDmrClusterLinkRemoteAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDmrClusterLinkRemoteAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDmrClusterLinkRemoteAddress",
		Method:             "GET",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses/{remoteAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDmrClusterLinkRemoteAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDmrClusterLinkRemoteAddressOK), nil

}

/*
GetDmrClusterLinkRemoteAddresses gets a list of remote address objects

Get a list of Remote Address objects.

Each Remote Address, consisting of a FQDN or IP address and optional port, is used to connect to the remote node for this Link. Up to 4 addresses may be provided for each Link, and will be tried on a round-robin basis.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
dmrClusterName|x||
remoteAddress|x||
remoteNodeName|x||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) GetDmrClusterLinkRemoteAddresses(params *GetDmrClusterLinkRemoteAddressesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDmrClusterLinkRemoteAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDmrClusterLinkRemoteAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDmrClusterLinkRemoteAddresses",
		Method:             "GET",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDmrClusterLinkRemoteAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDmrClusterLinkRemoteAddressesOK), nil

}

/*
GetDmrClusterLinkTLSTrustedCommonName gets a trusted common name object

Get a Trusted Common Name object.

The Trusted Common Names for the Link are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
dmrClusterName|x||
remoteNodeName|x||
tlsTrustedCommonName|x||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) GetDmrClusterLinkTLSTrustedCommonName(params *GetDmrClusterLinkTLSTrustedCommonNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetDmrClusterLinkTLSTrustedCommonNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDmrClusterLinkTLSTrustedCommonNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDmrClusterLinkTlsTrustedCommonName",
		Method:             "GET",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames/{tlsTrustedCommonName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDmrClusterLinkTLSTrustedCommonNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDmrClusterLinkTLSTrustedCommonNameOK), nil

}

/*
GetDmrClusterLinkTLSTrustedCommonNames gets a list of trusted common name objects

Get a list of Trusted Common Name objects.

The Trusted Common Names for the Link are used by encrypted transports to verify the name in the certificate presented by the remote node. They must include the common name of the remote node's server certificate or client certificate, depending upon the initiator of the connection.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
dmrClusterName|x||
remoteNodeName|x||
tlsTrustedCommonName|x||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) GetDmrClusterLinkTLSTrustedCommonNames(params *GetDmrClusterLinkTLSTrustedCommonNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDmrClusterLinkTLSTrustedCommonNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDmrClusterLinkTLSTrustedCommonNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDmrClusterLinkTlsTrustedCommonNames",
		Method:             "GET",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDmrClusterLinkTLSTrustedCommonNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDmrClusterLinkTLSTrustedCommonNamesOK), nil

}

/*
GetDmrClusterLinks gets a list of link objects

Get a list of Link objects.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
authenticationBasicPassword||x|
dmrClusterName|x||
remoteNodeName|x||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) GetDmrClusterLinks(params *GetDmrClusterLinksParams, authInfo runtime.ClientAuthInfoWriter) (*GetDmrClusterLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDmrClusterLinksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDmrClusterLinks",
		Method:             "GET",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDmrClusterLinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDmrClusterLinksOK), nil

}

/*
GetDmrClusters gets a list of cluster objects

Get a list of Cluster objects.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Write-Only|Deprecated
:---|:---:|:---:|:---:
authenticationBasicPassword||x|
authenticationClientCertContent||x|
authenticationClientCertPassword||x|
dmrClusterName|x||



A SEMP client authorized with a minimum access scope/level of "global/read-only" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) GetDmrClusters(params *GetDmrClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetDmrClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDmrClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDmrClusters",
		Method:             "GET",
		PathPattern:        "/dmrClusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDmrClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDmrClustersOK), nil

}

/*
ReplaceDmrCluster replaces a cluster object

Replace a Cluster object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword|||x|x|
authenticationClientCertContent|||x|x|
authenticationClientCertPassword|||x|x|
directOnlyEnabled||x|||
dmrClusterName|x|x|||
nodeName||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
DmrCluster|authenticationClientCertPassword|authenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) ReplaceDmrCluster(params *ReplaceDmrClusterParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceDmrClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceDmrClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceDmrCluster",
		Method:             "PUT",
		PathPattern:        "/dmrClusters/{dmrClusterName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceDmrClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceDmrClusterOK), nil

}

/*
ReplaceDmrClusterLink replaces a link object

Replace a Link object. Any attribute missing from the request will be set to its default value, unless the user is not authorized to change its value in which case the missing attribute will be left unchanged.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword|||x|x|
authenticationScheme||||x|
dmrClusterName|x|x|||
egressFlowWindowSize||||x|
initiator||||x|
remoteNodeName|x|x|||
span||||x|
transportCompressedEnabled||||x|
transportTlsEnabled||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) ReplaceDmrClusterLink(params *ReplaceDmrClusterLinkParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceDmrClusterLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceDmrClusterLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceDmrClusterLink",
		Method:             "PUT",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceDmrClusterLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceDmrClusterLinkOK), nil

}

/*
UpdateDmrCluster updates a cluster object

Update a Cluster object. Any attribute missing from the request will be left unchanged.

A Cluster is a provisioned object on a message broker that contains global DMR configuration parameters.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword|||x|x|
authenticationClientCertContent|||x|x|
authenticationClientCertPassword|||x|x|
directOnlyEnabled||x|||
dmrClusterName|x|x|||
nodeName||x|||



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
DmrCluster|authenticationClientCertPassword|authenticationClientCertContent|



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) UpdateDmrCluster(params *UpdateDmrClusterParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDmrClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDmrClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDmrCluster",
		Method:             "PATCH",
		PathPattern:        "/dmrClusters/{dmrClusterName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateDmrClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDmrClusterOK), nil

}

/*
UpdateDmrClusterLink updates a link object

Update a Link object. Any attribute missing from the request will be left unchanged.

A Link connects nodes (either within a Cluster or between two different Clusters) and allows them to exchange topology information, subscriptions and data.


Attribute|Identifying|Read-Only|Write-Only|Requires-Disable|Deprecated
:---|:---:|:---:|:---:|:---:|:---:
authenticationBasicPassword|||x|x|
authenticationScheme||||x|
dmrClusterName|x|x|||
egressFlowWindowSize||||x|
initiator||||x|
remoteNodeName|x|x|||
span||||x|
transportCompressedEnabled||||x|
transportTlsEnabled||||x|



The following attributes in the request may only be provided in certain combinations with other attributes:


Class|Attribute|Requires|Conflicts
:---|:---|:---|:---
EventThreshold|clearPercent|setPercent|clearValue, setValue
EventThreshold|clearValue|setValue|clearPercent, setPercent
EventThreshold|setPercent|clearPercent|clearValue, setValue
EventThreshold|setValue|clearValue|clearPercent, setPercent



A SEMP client authorized with a minimum access scope/level of "global/read-write" is required to perform this operation.

This has been available since 2.11.
*/
func (a *Client) UpdateDmrClusterLink(params *UpdateDmrClusterLinkParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDmrClusterLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDmrClusterLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDmrClusterLink",
		Method:             "PATCH",
		PathPattern:        "/dmrClusters/{dmrClusterName}/links/{remoteNodeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateDmrClusterLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDmrClusterLinkOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
