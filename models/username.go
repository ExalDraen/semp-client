// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Username username
// swagger:model Username
type Username struct {

	// The global-scope access-level of a CLI username. The default value is `"read-only"`. The allowed values and their meaning are:
	//
	// <pre>
	// "none" - User has no access to global data.
	// "read-only" - User has read-only access to global data.
	// "read-write" - User has read-write access to most global data.
	// "admin" - User has read-write access to all global data.
	// </pre>
	//
	// Enum: [none read-only read-write admin]
	GlobalAccessLevel string `json:"globalAccessLevel,omitempty"`

	// The vpn-scope access-level that gets assigned by default to CLI users on each Message VPN unless there is an access-level exception configured for it. In that case the exception takes precedence. The default value is `"none"`. The allowed values and their meaning are:
	//
	// <pre>
	// "none" - User has no access to a Message VPN.
	// "read-only" - User has read-only access to a Message VPN.
	// "read-write" - User has read-write access to most Message VPN settings.
	// </pre>
	//
	// Enum: [none read-only read-write]
	MsgVpnDefaultAccessLevel string `json:"msgVpnDefaultAccessLevel,omitempty"`

	// Change the password of the user. The default is to have no `password`.
	Password string `json:"password,omitempty"`

	// Username.
	UserName string `json:"userName,omitempty"`
}

// Validate validates this username
func (m *Username) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGlobalAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsgVpnDefaultAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var usernameTypeGlobalAccessLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","read-only","read-write","admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		usernameTypeGlobalAccessLevelPropEnum = append(usernameTypeGlobalAccessLevelPropEnum, v)
	}
}

const (

	// UsernameGlobalAccessLevelNone captures enum value "none"
	UsernameGlobalAccessLevelNone string = "none"

	// UsernameGlobalAccessLevelReadOnly captures enum value "read-only"
	UsernameGlobalAccessLevelReadOnly string = "read-only"

	// UsernameGlobalAccessLevelReadWrite captures enum value "read-write"
	UsernameGlobalAccessLevelReadWrite string = "read-write"

	// UsernameGlobalAccessLevelAdmin captures enum value "admin"
	UsernameGlobalAccessLevelAdmin string = "admin"
)

// prop value enum
func (m *Username) validateGlobalAccessLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, usernameTypeGlobalAccessLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Username) validateGlobalAccessLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.GlobalAccessLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateGlobalAccessLevelEnum("globalAccessLevel", "body", m.GlobalAccessLevel); err != nil {
		return err
	}

	return nil
}

var usernameTypeMsgVpnDefaultAccessLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","read-only","read-write"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		usernameTypeMsgVpnDefaultAccessLevelPropEnum = append(usernameTypeMsgVpnDefaultAccessLevelPropEnum, v)
	}
}

const (

	// UsernameMsgVpnDefaultAccessLevelNone captures enum value "none"
	UsernameMsgVpnDefaultAccessLevelNone string = "none"

	// UsernameMsgVpnDefaultAccessLevelReadOnly captures enum value "read-only"
	UsernameMsgVpnDefaultAccessLevelReadOnly string = "read-only"

	// UsernameMsgVpnDefaultAccessLevelReadWrite captures enum value "read-write"
	UsernameMsgVpnDefaultAccessLevelReadWrite string = "read-write"
)

// prop value enum
func (m *Username) validateMsgVpnDefaultAccessLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, usernameTypeMsgVpnDefaultAccessLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Username) validateMsgVpnDefaultAccessLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.MsgVpnDefaultAccessLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateMsgVpnDefaultAccessLevelEnum("msgVpnDefaultAccessLevel", "body", m.MsgVpnDefaultAccessLevel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Username) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Username) UnmarshalBinary(b []byte) error {
	var res Username
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
