// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMsgVpnBridgeRemoteMsgVpnParams creates a new GetMsgVpnBridgeRemoteMsgVpnParams object
// with the default values initialized.
func NewGetMsgVpnBridgeRemoteMsgVpnParams() *GetMsgVpnBridgeRemoteMsgVpnParams {
	var ()
	return &GetMsgVpnBridgeRemoteMsgVpnParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMsgVpnBridgeRemoteMsgVpnParamsWithTimeout creates a new GetMsgVpnBridgeRemoteMsgVpnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMsgVpnBridgeRemoteMsgVpnParamsWithTimeout(timeout time.Duration) *GetMsgVpnBridgeRemoteMsgVpnParams {
	var ()
	return &GetMsgVpnBridgeRemoteMsgVpnParams{

		timeout: timeout,
	}
}

// NewGetMsgVpnBridgeRemoteMsgVpnParamsWithContext creates a new GetMsgVpnBridgeRemoteMsgVpnParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMsgVpnBridgeRemoteMsgVpnParamsWithContext(ctx context.Context) *GetMsgVpnBridgeRemoteMsgVpnParams {
	var ()
	return &GetMsgVpnBridgeRemoteMsgVpnParams{

		Context: ctx,
	}
}

// NewGetMsgVpnBridgeRemoteMsgVpnParamsWithHTTPClient creates a new GetMsgVpnBridgeRemoteMsgVpnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMsgVpnBridgeRemoteMsgVpnParamsWithHTTPClient(client *http.Client) *GetMsgVpnBridgeRemoteMsgVpnParams {
	var ()
	return &GetMsgVpnBridgeRemoteMsgVpnParams{
		HTTPClient: client,
	}
}

/*GetMsgVpnBridgeRemoteMsgVpnParams contains all the parameters to send to the API endpoint
for the get msg vpn bridge remote msg vpn operation typically these are written to a http.Request
*/
type GetMsgVpnBridgeRemoteMsgVpnParams struct {

	/*BridgeName
	  The bridgeName of the Bridge.

	*/
	BridgeName string
	/*BridgeVirtualRouter
	  The bridgeVirtualRouter of the Bridge.

	*/
	BridgeVirtualRouter string
	/*MsgVpnName
	  The msgVpnName of the Message VPN.

	*/
	MsgVpnName string
	/*RemoteMsgVpnInterface
	  The remoteMsgVpnInterface of the Remote Message VPN.

	*/
	RemoteMsgVpnInterface string
	/*RemoteMsgVpnLocation
	  The remoteMsgVpnLocation of the Remote Message VPN.

	*/
	RemoteMsgVpnLocation string
	/*RemoteMsgVpnName
	  The remoteMsgVpnName of the Remote Message VPN.

	*/
	RemoteMsgVpnName string
	/*Select
	  Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See [Select](#select "Description of the syntax of the `select` parameter").

	*/
	Select []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithTimeout(timeout time.Duration) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithContext(ctx context.Context) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithHTTPClient(client *http.Client) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBridgeName adds the bridgeName to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithBridgeName(bridgeName string) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetBridgeName(bridgeName)
	return o
}

// SetBridgeName adds the bridgeName to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetBridgeName(bridgeName string) {
	o.BridgeName = bridgeName
}

// WithBridgeVirtualRouter adds the bridgeVirtualRouter to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithBridgeVirtualRouter(bridgeVirtualRouter string) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetBridgeVirtualRouter(bridgeVirtualRouter)
	return o
}

// SetBridgeVirtualRouter adds the bridgeVirtualRouter to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetBridgeVirtualRouter(bridgeVirtualRouter string) {
	o.BridgeVirtualRouter = bridgeVirtualRouter
}

// WithMsgVpnName adds the msgVpnName to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithMsgVpnName(msgVpnName string) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetMsgVpnName(msgVpnName)
	return o
}

// SetMsgVpnName adds the msgVpnName to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetMsgVpnName(msgVpnName string) {
	o.MsgVpnName = msgVpnName
}

// WithRemoteMsgVpnInterface adds the remoteMsgVpnInterface to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithRemoteMsgVpnInterface(remoteMsgVpnInterface string) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetRemoteMsgVpnInterface(remoteMsgVpnInterface)
	return o
}

// SetRemoteMsgVpnInterface adds the remoteMsgVpnInterface to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetRemoteMsgVpnInterface(remoteMsgVpnInterface string) {
	o.RemoteMsgVpnInterface = remoteMsgVpnInterface
}

// WithRemoteMsgVpnLocation adds the remoteMsgVpnLocation to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithRemoteMsgVpnLocation(remoteMsgVpnLocation string) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetRemoteMsgVpnLocation(remoteMsgVpnLocation)
	return o
}

// SetRemoteMsgVpnLocation adds the remoteMsgVpnLocation to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetRemoteMsgVpnLocation(remoteMsgVpnLocation string) {
	o.RemoteMsgVpnLocation = remoteMsgVpnLocation
}

// WithRemoteMsgVpnName adds the remoteMsgVpnName to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithRemoteMsgVpnName(remoteMsgVpnName string) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetRemoteMsgVpnName(remoteMsgVpnName)
	return o
}

// SetRemoteMsgVpnName adds the remoteMsgVpnName to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetRemoteMsgVpnName(remoteMsgVpnName string) {
	o.RemoteMsgVpnName = remoteMsgVpnName
}

// WithSelect adds the selectVar to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WithSelect(selectVar []string) *GetMsgVpnBridgeRemoteMsgVpnParams {
	o.SetSelect(selectVar)
	return o
}

// SetSelect adds the select to the get msg vpn bridge remote msg vpn params
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) SetSelect(selectVar []string) {
	o.Select = selectVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetMsgVpnBridgeRemoteMsgVpnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param bridgeName
	if err := r.SetPathParam("bridgeName", o.BridgeName); err != nil {
		return err
	}

	// path param bridgeVirtualRouter
	if err := r.SetPathParam("bridgeVirtualRouter", o.BridgeVirtualRouter); err != nil {
		return err
	}

	// path param msgVpnName
	if err := r.SetPathParam("msgVpnName", o.MsgVpnName); err != nil {
		return err
	}

	// path param remoteMsgVpnInterface
	if err := r.SetPathParam("remoteMsgVpnInterface", o.RemoteMsgVpnInterface); err != nil {
		return err
	}

	// path param remoteMsgVpnLocation
	if err := r.SetPathParam("remoteMsgVpnLocation", o.RemoteMsgVpnLocation); err != nil {
		return err
	}

	// path param remoteMsgVpnName
	if err := r.SetPathParam("remoteMsgVpnName", o.RemoteMsgVpnName); err != nil {
		return err
	}

	valuesSelect := o.Select

	joinedSelect := swag.JoinByFormat(valuesSelect, "csv")
	// query array param select
	if err := r.SetQueryParam("select", joinedSelect...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
